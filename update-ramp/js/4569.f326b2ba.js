"use strict";(self["webpackChunkramp_website"]=self["webpackChunkramp_website"]||[]).push([[4569],{94569:function(e,t,r){r.r(t),r.d(t,{default:function(){return f}});var i,s=r(44444),o=r(55209),n=r(6255);let l=i=class extends o.a{constructor(){super(...arguments),this.type="identity"}clone(){return new i}};(0,s.bt)([(0,s.e3)({IdentityXform:"identity"})],l.prototype,"type",void 0),l=i=(0,s.bt)([(0,s.bv)("esri.layers.support.rasterTransforms.IdentityTransform")],l);const a=l,c={GCSShiftXform:o.c,IdentityXform:a,PolynomialXform:o.y};function m(e){if(!e?.type)return null;const t=c[e?.type];if(t){const r=new t;return r.read(e),r}return null}class f{convertVectorFieldData(e){const t=s.iH.fromJSON(e.pixelBlock),r=(0,s.iI)(t,e.type);return Promise.resolve(null!=r?r.toJSON():null)}computeStatisticsHistograms(e){const t=s.iH.fromJSON(e.pixelBlock),r=(0,s.iJ)(t);return Promise.resolve(r)}async decode(e){const t=await(0,s.iK)(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=s.iH.fromJSON(e.pixelBlock),e.extent=e.extent?s.bn.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(null!=t?t.toJSON():null)}async updateSymbolizer(e){this.symbolizer=s.iL.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=(0,o.T)(e.rasterFunctionJSON)}async process(e){const t=this.rasterFunction.process({extent:s.bn.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map((e=>null!=e?s.iH.fromJSON(e):null)),primaryPixelSizes:e.primaryPixelSizes?.map((e=>null!=e?s.D.fromJSON(e):null)),primaryRasterIds:e.primaryRasterIds});return null!=t?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(s.iH.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(t?.toJSON())}estimateStatisticsHistograms(e){const t=(0,s.iM)(s.iH.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=(0,s.iN)(s.iH.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel??0,!1===e.useBilinear);return t&&t.forEach(((e,r)=>{t.set(r,e?.toJSON())})),Promise.resolve(t)}clipTile(e){const t=s.iH.fromJSON(e.pixelBlock),r=(0,s.iO)({...e,pixelBlock:t});return Promise.resolve(r?.toJSON())}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map((e=>e?new s.iH(e):null)),r=(0,s.iP)(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let i,o=r;return e.coefs&&(o=(0,s.iQ)(r,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(i=(0,s.iR)(e.destDimension,e.gcsGrid),o=(0,s.iS)(o,e.isUV?"vector-uv":"vector-magdir",i)),{pixelBlock:o?.toJSON(),localNorthDirections:i}}async createFlowMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:i,indexData:o}=await(0,s.iT)(e.meshType,e.simulationSettings,r,t.signal);return{result:{vertexBuffer:i.buffer,indexBuffer:o.buffer},transferList:[i.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=s.bn.fromJSON(e.projectedExtent),r=s.bn.fromJSON(e.srcBufferExtent);let i=null;e.datumTransformationSteps&&(i=new s.iU({steps:e.datumTransformationSteps})),(e.includeGCSGrid||(0,n.w)(t.spatialReference,r.spatialReference,i))&&await(0,n.v)();const o=e.rasterTransform?m(e.rasterTransform):null;return(0,n.i)({...e,projectedExtent:t,srcBufferExtent:r,datumTransformation:i,rasterTransform:o})}}}}]);
//# sourceMappingURL=4569.f326b2ba.js.map