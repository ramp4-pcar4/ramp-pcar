"use strict";(self["webpackChunkramp_website"]=self["webpackChunkramp_website"]||[]).push([[1555],{1555:function(e,t,i){i.d(t,{C:function(){return x},D:function(){return N},M:function(){return A},P:function(){return I},R:function(){return O},S:function(){return ie},T:function(){return K},U:function(){return S},a:function(){return D},b:function(){return o},c:function(){return U},d:function(){return $},e:function(){return R},f:function(){return w},g:function(){return u},h:function(){return Z},j:function(){return Y},l:function(){return l},m:function(){return p},n:function(){return P},o:function(){return n},q:function(){return C},r:function(){return a},w:function(){return ae},y:function(){return k}});var r=i(44444);const s={esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriUnknownUnits:"unknown",esriYards:"yards"},a=(0,r.ol)()(s);(0,r.ol)()({...s,esriIntFeet:"international-feet",esriIntInches:"international-inches",esriIntMiles:"international-miles",esriIntNauticalMiles:"international-nautical-miles",esriIntYards:"international-yards"}),(0,r.ol)()({esriAcres:"international-acres",esriAcresUS:"us-acres",esriAres:"ares",esriHectares:"hectares",esriSquareCentimeters:"square-centimeters",esriSquareDecimeters:"square-decimeters",esriSquareFeet:"square-international-feet",esriSquareFeetUS:"square-us-feet",esriSquareInches:"square-international-inches",esriSquareInchesUS:"square-us-inches",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareMiles:"square-international-miles",esriSquareMilesUS:"square-us-miles",esriSquareMillimeters:"square-millimeters",esriSquareYards:"square-international-yards",esriSquareYardsUS:"square-us-yards",esriUnknownAreaUnits:"unknown"});const o=(0,r.ol)()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"});(0,r.ol)()({esriNAUDays:"days",esriNAUHours:"hours",esriNAUMinutes:"minutes",esriNAUSeconds:"seconds"});const n=(0,r.ol)()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards",esriNAUDays:"days",esriNAUHours:"hours",esriNAUMinutes:"minutes",esriNAUSeconds:"seconds",esriNAUKilometersPerHour:"kilometers-per-hour",esriNAUMilesPerHour:"miles-per-hour",esriNAUUnknown:"unknown"}),l=(0,r.ol)()({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTFeatureSets:"featuresets",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),u=(0,r.ol)()({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"});(0,r.ol)()({esriNAOutputPolygonNone:"none",esriNAOutputPolygonSimplified:"simplified",esriNAOutputPolygonDetailed:"detailed"});const p=(0,r.ol)()({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"});(0,r.ol)()({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"}),(0,r.ol)()({esriNATimeOfDayNotUsed:"not-used",esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"});const b=(0,r.ol)()({AUTOMOBILE:"automobile",TRUCK:"truck",WALK:"walk",OTHER:"other"}),d=(0,r.ol)()({0:"either-side-of-vehicle",1:"right-side-of-vehicle",2:"left-side-of-vehicle",3:"no-u-turn"},{useNumericKeys:!0}),m=(0,r.ol)()({0:"stop",1:"waypoint",2:"break"},{useNumericKeys:!0}),c=(0,r.ol)()({0:"ok",1:"not-located",2:"network-element-not-located",3:"element-not-traversable",4:"invalid-field-values",5:"not-reached",6:"time-window-violation",7:"not-located-on-closest"},{useNumericKeys:!0}),y=(0,r.ol)()({1:"right",2:"left"},{useNumericKeys:!0}),T=(0,r.ol)()({0:"restriction",1:"scaled-cost",2:"added-cost"},{useNumericKeys:!0}),h=(0,r.ol)()({0:"permit",1:"restrict"},{useNumericKeys:!0}),v=(0,r.ol)()({1:"header",50:"arrive",51:"depart",52:"straight",100:"on-ferry",101:"off-ferry",102:"central-fork",103:"roundabout",104:"u-turn",150:"door",151:"stairs",152:"elevator",153:"escalator",154:"pedestrian-ramp",200:"left-fork",201:"left-ramp",202:"clockwise-roundabout",203:"left-handed-u-turn",204:"bear-left",205:"left-turn",206:"sharp-left",207:"left-turn-and-immediate-left-turn",208:"left-turn-and-immediate-right-turn",300:"right-fork",301:"right-ramp",302:"counter-clockwise-roundabout",303:"right-handed-u-turn",304:"bear-right",305:"right-turn",306:"sharp-right",307:"right-turn-and-immediate-left-turn",308:"right-turn-and-immediate-right-turn",400:"up-elevator",401:"up-escalator",402:"up-stairs",500:"down-elevator",501:"down-escalator",502:"down-stairs",1e3:"general-event",1001:"landmark",1002:"time-zone-change",1003:"traffic-event",1004:"scaled-cost-barrier-event",1005:"boundary-crossing",1006:"restriction-violation",1007:"lane"},{useNumericKeys:!0}),f=(0,r.ol)()({0:"unknown",1:"segment",2:"maneuver-segment",3:"restriction-violation",4:"scaled-cost-barrier",5:"heavy-traffic",6:"slow-traffic",7:"moderate-traffic"},{useNumericKeys:!0}),S=(0,r.ol)()({"NA Campus":"campus","NA Desktop":"desktop","NA Navigation":"navigation"}),g=(0,r.ol)()({Kilometers:"kilometers",Miles:"miles",Meters:"meters"},{ignoreUnknown:!1}),N=(0,r.ol)()({Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),D=(0,r.ol)()({Kilometers:"kilometers",Miles:"miles",Meters:"meters",Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),A=(0,r.ol)()({"Any Hazmat Prohibited":"any-hazmat-prohibited","Avoid Carpool Roads":"avoid-carpool-roads","Avoid Express Lanes":"avoid-express-lanes","Avoid Ferries":"avoid-ferries","Avoid Gates":"avoid-gates","Avoid Limited Access Roads":"avoid-limited-access-roads","Avoid Private Roads":"avoid-private-roads","Avoid Roads Unsuitable for Pedestrians":"avoid-roads-unsuitable-for-pedestrians","Avoid Stairways":"avoid-stairways","Avoid Toll Roads":"avoid-toll-roads","Avoid Toll Roads for Trucks":"avoid-toll-roads-for-trucks","Avoid Truck Restricted Roads":"avoid-truck-restricted-roads","Avoid Unpaved Roads":"avoid-unpaved-roads","Axle Count Restriction":"axle-count-restriction","Driving a Bus":"driving-a-bus","Driving a Taxi":"driving-a-taxi","Driving a Truck":"driving-a-truck","Driving an Automobile":"driving-an-automobile","Driving an Emergency Vehicle":"driving-an-emergency-vehicle","Height Restriction":"height-restriction","Kingpin to Rear Axle Length Restriction":"kingpin-to-rear-axle-length-restriction","Length Restriction":"length-restriction","Preferred for Pedestrians":"preferred-for-pedestrians","Riding a Motorcycle":"riding-a-motorcycle","Roads Under Construction Prohibited":"roads-under-construction-prohibited","Semi or Tractor with One or More Trailers Prohibited":"semi-or-tractor-with-one-or-more-trailers-prohibited","Single Axle Vehicles Prohibited":"single-axle-vehicles-prohibited","Tandem Axle Vehicles Prohibited":"tandem-axle-vehicles-prohibited","Through Traffic Prohibited":"through-traffic-prohibited","Truck with Trailers Restriction":"truck-with-trailers-restriction","Use Preferred Hazmat Routes":"use-preferred-hazmat-routes","Use Preferred Truck Routes":"use-preferred-truck-routes",Walking:"walking","Weight Restriction":"weight-restriction"},{ignoreUnknown:!1}),O=(0,r.ol)()({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"}),w=(0,r.ol)()({esriGeometryPoint:"point",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"envelope",esriGeometryMultipoint:"multipoint"}),C=(0,r.ol)()({esriNAUTCost:"cost",esriNAUTDescriptor:"descriptor",esriNAUTRestriction:"restriction",esriNAUTHierarchy:"hierarchy"}),I=(0,r.ol)()({esriDSTAltName:"alt-name",esriDSTArrive:"arrive",esriDSTBranch:"branch",esriDSTCrossStreet:"cross-street",esriDSTCumulativeLength:"cumulative-length",esriDSTDepart:"depart",esriDSTEstimatedArrivalTime:"estimated-arrival-time",esriDSTExit:"exit",esriDSTGeneral:"general",esriDSTLength:"length",esriDSTServiceTime:"service-time",esriDSTStreetName:"street-name",esriDSTSummary:"summary",esriDSTTime:"time",esriDSTTimeWindow:"time-window",esriDSTToward:"toward",esriDSTViolationTime:"violation-time",esriDSTWaitTime:"wait-time"});var j;let F=j=class extends((0,r.cQ)(r.bw)){constructor(e){super(e),this.directionLineType=null,this.directionPointId=null,this.distance=null,this.duration=null,this.fromLevel=null,this.geometry=null,this.objectId=null,this.popupTemplate=null,this.symbol=null,this.toLevel=null,this.type="direction-line"}static fromGraphic(e){return new j({directionLineType:f.fromJSON(e.attributes.DirectionLineType),directionPointId:e.attributes.DirectionPointID,distance:e.attributes.Meters,duration:e.attributes.Minutes,fromLevel:e.attributes.FromLevel??null,geometry:e.geometry,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,symbol:e.symbol,toLevel:e.attributes.ToLevel??null})}toGraphic(){const e={ObjectID:this.objectId,DirectionLineType:null!=this.directionLineType?f.toJSON(this.directionLineType):null,DirectionPointID:this.directionPointId,Meters:this.distance,Minutes:this.duration};return null!=this.fromLevel&&(e.FromLevel=this.fromLevel),null!=this.toLevel&&(e.ToLevel=this.toLevel),new r.a1({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};F.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"DirectionLineType",alias:"Line Type",type:"esriFieldTypeInteger"},{name:"DirectionPointID",alias:"Direction Point ID",type:"esriFieldTypeInteger"},{name:"FromLevel",alias:"From Level",type:"esriFieldTypeInteger"},{name:"Meters",alias:"Meters",type:"esriFieldTypeDouble"},{name:"Minutes",alias:"Minutes",type:"esriFieldTypeDouble"},{name:"ToLevel",alias:"To Level",type:"esriFieldTypeInteger"}],(0,r.bt)([(0,r.bu)({type:f.apiValues,json:{read:{source:"attributes.DirectionLineType",reader:f.read}}})],F.prototype,"directionLineType",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.DirectionPointID"}}})],F.prototype,"directionPointId",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.Meters"}}})],F.prototype,"distance",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.Minutes"}}})],F.prototype,"duration",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.FromLevel"}}})],F.prototype,"fromLevel",void 0),(0,r.bt)([(0,r.bu)({type:r.a_})],F.prototype,"geometry",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.ObjectID"}}})],F.prototype,"objectId",void 0),(0,r.bt)([(0,r.bu)({type:r.ce})],F.prototype,"popupTemplate",void 0),(0,r.bt)([(0,r.bu)({types:r.om})],F.prototype,"symbol",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.ToLevel"}}})],F.prototype,"toLevel",void 0),(0,r.bt)([(0,r.bu)({readOnly:!0,json:{read:!1}})],F.prototype,"type",void 0),F=j=(0,r.bt)([(0,r.bv)("esri.rest.support.DirectionLine")],F);const U=F;var M;let E=M=class extends((0,r.cQ)(r.bw)){constructor(e){super(e),this.alternateName=null,this.arrivalTime=null,this.arrivalTimeOffset=null,this.azimuth=null,this.branchName=null,this.directionPointType=null,this.displayText=null,this.exitName=null,this.geometry=null,this.intersectingName=null,this.level=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sequence=null,this.shortVoiceInstruction=null,this.stopId=null,this.symbol=null,this.towardName=null,this.type="direction-point",this.voiceInstruction=null}readArrivalTime(e,t){return null!=t.attributes.ArrivalTime?new Date(t.attributes.ArrivalTime):null}static fromGraphic(e){return new M({alternateName:e.attributes.AlternateName??null,arrivalTime:null!=e.attributes.ArrivalTime?new Date(e.attributes.ArrivalTime):null,arrivalTimeOffset:e.attributes.ArrivalUTCOffset??null,azimuth:e.attributes.Azimuth??null,branchName:e.attributes.BranchName??null,directionPointType:v.fromJSON(e.attributes.DirectionPointType),displayText:e.attributes.DisplayText??null,exitName:e.attributes.ExitName??null,geometry:e.geometry,intersectingName:e.attributes.IntersectingName??null,level:e.attributes.Level??null,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,sequence:e.attributes.Sequence,shortVoiceInstruction:e.attributes.ShortVoiceInstruction??null,stopId:e.attributes.StopID??null,symbol:e.symbol,towardName:e.attributes.TowardName??null,voiceInstruction:e.attributes.VoiceInstruction??null})}toGraphic(){const e={ObjectID:this.objectId,DirectionPointType:null!=this.directionPointType?v.toJSON(this.directionPointType):null,Sequence:this.sequence,StopID:this.stopId};return null!=this.alternateName&&(e.AlternateName=this.alternateName),null!=this.arrivalTime&&(e.ArrivalTime=this.arrivalTime.getTime()),null!=this.arrivalTimeOffset&&(e.ArrivalUTCOffset=this.arrivalTimeOffset),null!=this.azimuth&&(e.Azimuth=this.azimuth),null!=this.branchName&&(e.BranchName=this.branchName),null!=this.displayText&&(e.DisplayText=this.displayText),null!=this.exitName&&(e.ExitName=this.exitName),null!=this.intersectingName&&(e.IntersectingName=this.intersectingName),null!=this.level&&(e.Level=this.level),null!=this.name&&(e.Name=this.name),null!=this.shortVoiceInstruction&&(e.ShortVoiceInstruction=this.shortVoiceInstruction),null!=this.towardName&&(e.TowardName=this.towardName),null!=this.voiceInstruction&&(e.VoiceInstruction=this.voiceInstruction),new r.a1({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};E.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AlternateName",alias:"Alternative Name",type:"esriFieldTypeString"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time Offset",type:"esriFieldTypeInteger"},{name:"Azimuth",alias:"Azimuth",type:"esriFieldTypeDouble"},{name:"BranchName",alias:"Branch Name",type:"esriFieldTypeString"},{name:"DirectionPointType",alias:"Directions Point Type",type:"esriFieldTypeInteger"},{name:"DisplayText",alias:"Display Text",type:"esriFieldTypeString"},{name:"ExitName",alias:"Exit Name",type:"esriFieldTypeString"},{name:"IntersectingName",alias:"Intersecting Name",type:"esriFieldTypeString"},{name:"Level",alias:"Level",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ShortVoiceInstruction",alias:"Short Voice Instruction",type:"esriFieldTypeString"},{name:"StopID",alias:"Stop ID",type:"esriFieldTypeInteger"},{name:"TowardName",alias:"Toward Name",type:"esriFieldTypeString"},{name:"VoiceInstruction",alias:"Voice Instruction",type:"esriFieldTypeString"}],(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.AlternateName"}}})],E.prototype,"alternateName",void 0),(0,r.bt)([(0,r.bu)()],E.prototype,"arrivalTime",void 0),(0,r.bt)([(0,r.eg)("arrivalTime",["attributes.ArrivalTime"])],E.prototype,"readArrivalTime",null),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.ArrivalUTCOffset"}}})],E.prototype,"arrivalTimeOffset",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.Azimuth"}}})],E.prototype,"azimuth",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.BranchName"}}})],E.prototype,"branchName",void 0),(0,r.bt)([(0,r.bu)({type:v.apiValues,json:{read:{source:"attributes.DirectionPointType",reader:v.read}}})],E.prototype,"directionPointType",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.DisplayText"}}})],E.prototype,"displayText",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.ExitName"}}})],E.prototype,"exitName",void 0),(0,r.bt)([(0,r.bu)({type:r.D})],E.prototype,"geometry",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.IntersectingName"}}})],E.prototype,"intersectingName",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.Level"}}})],E.prototype,"level",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.Name"}}})],E.prototype,"name",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.ObjectID"}}})],E.prototype,"objectId",void 0),(0,r.bt)([(0,r.bu)({type:r.ce})],E.prototype,"popupTemplate",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.Sequence"}}})],E.prototype,"sequence",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.ShortVoiceInstruction"}}})],E.prototype,"shortVoiceInstruction",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.StopID"}}})],E.prototype,"stopId",void 0),(0,r.bt)([(0,r.bu)({types:r.om})],E.prototype,"symbol",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.TowardName"}}})],E.prototype,"towardName",void 0),(0,r.bt)([(0,r.bu)({readOnly:!0,json:{read:!1}})],E.prototype,"type",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.VoiceInstruction"}}})],E.prototype,"voiceInstruction",void 0),E=M=(0,r.bt)([(0,r.bv)("esri.rest.support.DirectionPoint")],E);const k=E;function W(e,t){if(null==e)return null;const i={},r=new RegExp(`^${t}`,"i");for(const s of Object.keys(e))if(r.test(s)){const r=s.slice(t.length);i[D.fromJSON(r)]=e[s]}return i}function L(e,t,i){if(null!=e){t.attributes||(t.attributes={});for(const r in e){const s=D.toJSON(r);t.attributes[`${i}${s}`]=e[r]}}}function J(e){const t={};for(const i of Object.keys(e)){const r=i;t[D.fromJSON(r)]=e[i]}return t}function B(e){const t={};for(const i of Object.keys(e)){const r=i;t[D.toJSON(r)]=e[i]}return t}function P(e,t){return null==e||null==t?null:Math.round((e-t)/6e4)}function R(e){const t=e.toJSON(),i=t;return i.accumulateAttributeNames&&=t.accumulateAttributeNames?.join(),i.attributeParameterValues&&=JSON.stringify(t.attributeParameterValues),i.barriers&&=JSON.stringify(t.barriers),i.outSR&&=t.outSR?.wkid,i.overrides&&=JSON.stringify(t.overrides),i.polygonBarriers&&=JSON.stringify(t.polygonBarriers),i.polylineBarriers&&=JSON.stringify(t.polylineBarriers),i.restrictionAttributeNames&&=t.restrictionAttributeNames?.join(),i.stops&&=JSON.stringify(t.stops),i.travelMode&&=JSON.stringify(t.travelMode),i}var V;let q=V=class extends((0,r.cQ)(r.bw)){constructor(e){super(e),this.addedCost=null,this.barrierType=null,this.costs=null,this.curbApproach=null,this.fullEdge=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sideOfEdge=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.type="point-barrier"}readCosts(e,t){return W(t.attributes,"Attr_")}writeCosts(e,t){L(e,t,"Attr_")}static fromGraphic(e){return new V({addedCost:e.attributes.AddedCost??null,barrierType:null!=e.attributes.BarrierType?T.fromJSON(e.attributes.BarrierType):null,costs:null!=e.attributes.Costs?J(JSON.parse(e.attributes.Costs)):null,curbApproach:null!=e.attributes.CurbApproach?d.fromJSON(e.attributes.CurbApproach):null,fullEdge:null!=e.attributes.FullEdge?h.fromJSON(e.attributes.FullEdge):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,status:null!=e.attributes.Status?c.fromJSON(e.attributes.Status):null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,AddedCost:this.addedCost,BarrierType:null!=this.barrierType?T.toJSON(this.barrierType):null,Costs:null!=this.costs?JSON.stringify(B(this.costs)):null,CurbApproach:null!=this.curbApproach?d.toJSON(this.curbApproach):null,FullEdge:null!=this.fullEdge?h.toJSON(this.fullEdge):null,Name:this.name,Status:null!=this.status?c.toJSON(this.status):null};return new r.a1({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};q.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AddedCost",alias:"Added Cost",type:"esriFieldTypeDouble"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"FullEdge",alias:"Full Edge",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"}],(0,r.bt)([(0,r.bu)()],q.prototype,"addedCost",void 0),(0,r.bt)([(0,r.bu)({type:T.apiValues,json:{name:"attributes.BarrierType",read:{reader:T.read},write:{writer:T.write}}})],q.prototype,"barrierType",void 0),(0,r.bt)([(0,r.bu)()],q.prototype,"costs",void 0),(0,r.bt)([(0,r.eg)("costs",["attributes"])],q.prototype,"readCosts",null),(0,r.bt)([(0,r.eO)("costs")],q.prototype,"writeCosts",null),(0,r.bt)([(0,r.bu)({constructOnly:!0,type:d.apiValues,json:{read:{source:"attributes.CurbApproach",reader:d.read}}})],q.prototype,"curbApproach",void 0),(0,r.bt)([(0,r.bu)({type:h.apiValues,json:{name:"attributes.FullEdge",read:{reader:h.read},write:{writer:h.write}}})],q.prototype,"fullEdge",void 0),(0,r.bt)([(0,r.bu)({type:r.D,json:{write:!0}})],q.prototype,"geometry",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.Name"}})],q.prototype,"name",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.ObjectID"}})],q.prototype,"objectId",void 0),(0,r.bt)([(0,r.bu)({type:r.ce})],q.prototype,"popupTemplate",void 0),(0,r.bt)([(0,r.bu)({type:y.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:y.read}}})],q.prototype,"sideOfEdge",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.SourceID"}}})],q.prototype,"sourceId",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.SourceOID"}}})],q.prototype,"sourceOid",void 0),(0,r.bt)([(0,r.bu)({type:c.apiValues,json:{read:{source:"attributes.Status",reader:c.read}}})],q.prototype,"status",void 0),(0,r.bt)([(0,r.bu)({types:r.om})],q.prototype,"symbol",void 0),(0,r.bt)([(0,r.bu)({readOnly:!0,json:{read:!1}})],q.prototype,"type",void 0),q=V=(0,r.bt)([(0,r.bv)("esri.rest.support.PointBarrier")],q);const x=q;var _;let G=_=class extends((0,r.cQ)(r.bw)){constructor(e){super(e),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polygon-barrier"}readCosts(e,t){return W(t.attributes,"Attr_")}writeCosts(e,t){L(e,t,"Attr_")}static fromGraphic(e){return new _({barrierType:null!=e.attributes.BarrierType?T.fromJSON(e.attributes.BarrierType):null,costs:null!=e.attributes.Costs?J(JSON.parse(e.attributes.Costs)):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,scaleFactor:e.attributes.ScaleFactor??null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,BarrierType:null!=this.barrierType?T.toJSON(this.barrierType):null,Costs:null!=this.costs?JSON.stringify(B(this.costs)):null,Name:this.name??null,ScaleFactor:this.scaleFactor??null};return new r.a1({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};G.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],(0,r.bt)([(0,r.bu)({type:T.apiValues,json:{name:"attributes.BarrierType",read:{reader:T.read},write:{writer:T.write}}})],G.prototype,"barrierType",void 0),(0,r.bt)([(0,r.bu)()],G.prototype,"costs",void 0),(0,r.bt)([(0,r.eg)("costs",["attributes"])],G.prototype,"readCosts",null),(0,r.bt)([(0,r.eO)("costs")],G.prototype,"writeCosts",null),(0,r.bt)([(0,r.bu)({type:r.a$,json:{write:!0}})],G.prototype,"geometry",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.Name"}})],G.prototype,"name",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.ObjectID"}})],G.prototype,"objectId",void 0),(0,r.bt)([(0,r.bu)({type:r.ce})],G.prototype,"popupTemplate",void 0),(0,r.bt)([(0,r.bu)()],G.prototype,"scaleFactor",void 0),(0,r.bt)([(0,r.bu)({types:r.om})],G.prototype,"symbol",void 0),(0,r.bt)([(0,r.bu)({readOnly:!0,json:{read:!1}})],G.prototype,"type",void 0),G=_=(0,r.bt)([(0,r.bv)("esri.rest.support.PolygonBarrier")],G);const K=G;var z;let H=z=class extends((0,r.cQ)(r.bw)){constructor(e){super(e),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polyline-barrier"}readCosts(e,t){return W(t.attributes,"Attr_")}static fromGraphic(e){return new z({barrierType:null!=e.attributes.BarrierType?T.fromJSON(e.attributes.BarrierType):null,costs:null!=e.attributes.Costs?J(JSON.parse(e.attributes.Costs)):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,scaleFactor:e.attributes.ScaleFactor??null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,BarrierType:null!=this.barrierType?T.toJSON(this.barrierType):null,Costs:null!=this.costs?JSON.stringify(B(this.costs)):null,Name:this.name,ScaleFactor:this.scaleFactor};return new r.a1({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};H.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],(0,r.bt)([(0,r.bu)({type:T.apiValues,json:{read:{source:"attributes.BarrierType",reader:T.read}}})],H.prototype,"barrierType",void 0),(0,r.bt)([(0,r.bu)()],H.prototype,"costs",void 0),(0,r.bt)([(0,r.eg)("costs",["attributes"])],H.prototype,"readCosts",null),(0,r.bt)([(0,r.bu)({type:r.a_,json:{write:!0}})],H.prototype,"geometry",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.Name"}})],H.prototype,"name",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.ObjectID"}})],H.prototype,"objectId",void 0),(0,r.bt)([(0,r.bu)({type:r.ce})],H.prototype,"popupTemplate",void 0),(0,r.bt)([(0,r.bu)()],H.prototype,"scaleFactor",void 0),(0,r.bt)([(0,r.bu)({types:r.om})],H.prototype,"symbol",void 0),(0,r.bt)([(0,r.bu)({readOnly:!0,json:{read:!1}})],H.prototype,"type",void 0),H=z=(0,r.bt)([(0,r.bv)("esri.rest.support.PolylineBarrier")],H);const Y=H;let Q=class extends((0,r.cQ)(r.bw)){constructor(e){super(e),this.attributeParameterValues=null,this.description=null,this.distanceAttributeName=null,this.id=null,this.impedanceAttributeName=null,this.name=null,this.restrictionAttributeNames=null,this.simplificationTolerance=null,this.simplificationToleranceUnits=null,this.timeAttributeName=null,this.type=null,this.useHierarchy=null,this.uturnAtJunctions=null}readId(e,t){return t.id??t.itemId??null}readRestrictionAttributes(e,t){const{restrictionAttributeNames:i}=t;return null==i?null:i.map((e=>A.fromJSON(e)))}writeRestrictionAttributes(e,t,i){null!=e&&(t[i]=e.map((e=>A.toJSON(e))))}};(0,r.bt)([(0,r.bu)({type:[Object],json:{write:!0}})],Q.prototype,"attributeParameterValues",void 0),(0,r.bt)([(0,r.bu)({type:String,json:{write:!0}})],Q.prototype,"description",void 0),(0,r.bt)([(0,r.e3)(g,{ignoreUnknown:!1})],Q.prototype,"distanceAttributeName",void 0),(0,r.bt)([(0,r.bu)({type:String,json:{write:!0}})],Q.prototype,"id",void 0),(0,r.bt)([(0,r.eg)("id",["id","itemId"])],Q.prototype,"readId",null),(0,r.bt)([(0,r.e3)(D,{ignoreUnknown:!1})],Q.prototype,"impedanceAttributeName",void 0),(0,r.bt)([(0,r.bu)({type:String,json:{write:!0}})],Q.prototype,"name",void 0),(0,r.bt)([(0,r.bu)({type:[String],json:{write:!0}})],Q.prototype,"restrictionAttributeNames",void 0),(0,r.bt)([(0,r.eg)("restrictionAttributeNames")],Q.prototype,"readRestrictionAttributes",null),(0,r.bt)([(0,r.eO)("restrictionAttributeNames")],Q.prototype,"writeRestrictionAttributes",null),(0,r.bt)([(0,r.bu)({type:Number,json:{write:{allowNull:!0}}})],Q.prototype,"simplificationTolerance",void 0),(0,r.bt)([(0,r.e3)(a)],Q.prototype,"simplificationToleranceUnits",void 0),(0,r.bt)([(0,r.e3)(N,{ignoreUnknown:!1})],Q.prototype,"timeAttributeName",void 0),(0,r.bt)([(0,r.e3)(b)],Q.prototype,"type",void 0),(0,r.bt)([(0,r.bu)({type:Boolean,json:{write:!0}})],Q.prototype,"useHierarchy",void 0),(0,r.bt)([(0,r.e3)(p)],Q.prototype,"uturnAtJunctions",void 0),Q=(0,r.bt)([(0,r.bv)("esri.rest.support.TravelMode")],Q);const $=Q;let X=class extends r.bw{constructor(e){super(e),this.accumulateAttributes=null,this.directionsLanguage=null,this.findBestSequence=null,this.preserveFirstStop=null,this.preserveLastStop=null,this.startTimeIsUTC=null,this.timeWindowsAreUTC=null,this.travelMode=null}readAccumulateAttributes(e){return null==e?null:e.map((e=>D.fromJSON(e)))}writeAccumulateAttributes(e,t,i){e?.length&&(t[i]=e.map((e=>D.toJSON(e))))}};(0,r.bt)([(0,r.bu)({type:[String],json:{name:"accumulateAttributeNames",write:!0}})],X.prototype,"accumulateAttributes",void 0),(0,r.bt)([(0,r.eg)("accumulateAttributes")],X.prototype,"readAccumulateAttributes",null),(0,r.bt)([(0,r.eO)("accumulateAttributes")],X.prototype,"writeAccumulateAttributes",null),(0,r.bt)([(0,r.bu)({type:String,json:{write:!0}})],X.prototype,"directionsLanguage",void 0),(0,r.bt)([(0,r.bu)({type:Boolean,json:{write:!0}})],X.prototype,"findBestSequence",void 0),(0,r.bt)([(0,r.bu)({type:Boolean,json:{write:!0}})],X.prototype,"preserveFirstStop",void 0),(0,r.bt)([(0,r.bu)({type:Boolean,json:{write:!0}})],X.prototype,"preserveLastStop",void 0),(0,r.bt)([(0,r.bu)({type:Boolean,json:{write:!0}})],X.prototype,"startTimeIsUTC",void 0),(0,r.bt)([(0,r.bu)({type:Boolean,json:{write:!0}})],X.prototype,"timeWindowsAreUTC",void 0),(0,r.bt)([(0,r.bu)({type:$,json:{write:!0}})],X.prototype,"travelMode",void 0),X=(0,r.bt)([(0,r.bv)("esri.rest.support.RouteSettings")],X);const Z=X;var ee;let te=ee=class extends((0,r.cQ)(r.bw)){constructor(e){super(e),this.analysisSettings=null,this.endTime=null,this.endTimeOffset=null,this.firstStopId=null,this.geometry=null,this.lastStopId=null,this.messages=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.startTime=null,this.startTimeOffset=null,this.stopCount=null,this.symbol=null,this.totalCosts=null,this.totalDistance=null,this.totalDuration=null,this.totalLateDuration=null,this.totalViolations=null,this.totalWait=null,this.totalWaitDuration=null,this.type="route-info",this.version="1.0.0"}readEndTime(e,t){return null!=t.attributes.EndTimeUTC?new Date(t.attributes.EndTimeUTC):null}readEndTimeOffset(e,t){return P(t.attributes.EndTime,t.attributes.EndTimeUTC)}readStartTime(e,t){return null!=t.attributes.StartTimeUTC?new Date(t.attributes.StartTimeUTC):null}readStartTimeOffset(e,t){return P(t.attributes.StartTime,t.attributes.StartTimeUTC)}readTotalCosts(e,t){return W(t.attributes,"Total_")}readTotalViolations(e,t){return W(t.attributes,"TotalViolation_")}readTotalWait(e,t){return W(t.attributes,"TotalWait_")}static fromGraphic(e){return new ee({analysisSettings:null!=e.attributes.AnalysisSettings?Z.fromJSON(JSON.parse(e.attributes.AnalysisSettings)):null,endTime:null!=e.attributes.EndTime?new Date(e.attributes.EndTime):null,endTimeOffset:e.attributes.EndUTCOffset??null,geometry:e.geometry,messages:null!=e.attributes.Messages?JSON.parse(e.attributes.Messages):null,name:e.attributes.RouteName,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,startTime:null!=e.attributes.StartTime?new Date(e.attributes.StartTime):null,startTimeOffset:e.attributes.StartUTCOffset??null,symbol:e.symbol,totalCosts:null!=e.attributes.TotalCosts?J(JSON.parse(e.attributes.TotalCosts)):null,totalDistance:e.attributes.TotalMeters??null,totalDuration:e.attributes.TotalMinutes??null,totalLateDuration:e.attributes.TotalLateMinutes??null,totalWaitDuration:e.attributes.TotalWaitMinutes??null,version:e.attributes.Version})}toGraphic(){const e={ObjectID:this.objectId,AnalysisSettings:null!=this.analysisSettings?JSON.stringify(this.analysisSettings.toJSON()):null,EndTime:null!=this.endTime?this.endTime.getTime():null,EndUTCOffset:this.endTimeOffset,Messages:null!=this.messages?JSON.stringify(this.messages):null,RouteName:this.name,StartTime:null!=this.startTime?this.startTime.getTime():null,StartUTCOffset:this.startTimeOffset,TotalCosts:null!=this.totalCosts?JSON.stringify(B(this.totalCosts)):null,TotalLateMinutes:this.totalLateDuration,TotalMeters:this.totalDistance,TotalMinutes:this.totalDuration,TotalWaitMinutes:this.totalWaitDuration,Version:this.version};return new r.a1({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};te.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AnalysisSettings",alias:"Analysis Settings",type:"esriFieldTypeString"},{name:"EndTime",alias:"End Time",type:"esriFieldTypeDate"},{name:"EndUTCOffset",alias:"End Time Offset",type:"esriFieldTypeInteger"},{name:"Messages",alias:"Messages",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"StartTime",alias:"Start Time",type:"esriFieldTypeDate"},{name:"StartUTCOffset",alias:"Start Time Offset",type:"esriFieldTypeInteger"},{name:"TotalCosts",alias:"Total Costs",type:"esriFieldTypeString"},{name:"TotalLateMinutes",alias:"Total Late Minutes",type:"esriFieldTypeDouble"},{name:"TotalMeters",alias:"Total Meters",type:"esriFieldTypeDouble"},{name:"TotalMinutes",alias:"Total Minutes",type:"esriFieldTypeDouble"},{name:"TotalWaitMinutes",alias:"Total Wait Minutes",type:"esriFieldTypeDouble"},{name:"Version",alias:"Version",type:"esriFieldTypeString"}],(0,r.bt)([(0,r.bu)()],te.prototype,"analysisSettings",void 0),(0,r.bt)([(0,r.bu)()],te.prototype,"endTime",void 0),(0,r.bt)([(0,r.eg)("endTime",["attributes.EndTimeUTC"])],te.prototype,"readEndTime",null),(0,r.bt)([(0,r.bu)()],te.prototype,"endTimeOffset",void 0),(0,r.bt)([(0,r.eg)("endTimeOffset",["attributes.EndTime","attributes.EndTimeUTC"])],te.prototype,"readEndTimeOffset",null),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.FirstStopID"}}})],te.prototype,"firstStopId",void 0),(0,r.bt)([(0,r.bu)({type:r.a_})],te.prototype,"geometry",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.LastStopID"}}})],te.prototype,"lastStopId",void 0),(0,r.bt)([(0,r.bu)()],te.prototype,"messages",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.Name"}}})],te.prototype,"name",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.ObjectID"}}})],te.prototype,"objectId",void 0),(0,r.bt)([(0,r.bu)({type:r.ce})],te.prototype,"popupTemplate",void 0),(0,r.bt)([(0,r.bu)()],te.prototype,"startTime",void 0),(0,r.bt)([(0,r.eg)("startTime",["attributes.StartTimeUTC"])],te.prototype,"readStartTime",null),(0,r.bt)([(0,r.bu)()],te.prototype,"startTimeOffset",void 0),(0,r.bt)([(0,r.eg)("startTimeOffset",["attributes.StartTime","attributes.StartTimeUTC"])],te.prototype,"readStartTimeOffset",null),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.StopCount"}}})],te.prototype,"stopCount",void 0),(0,r.bt)([(0,r.bu)({types:r.om})],te.prototype,"symbol",void 0),(0,r.bt)([(0,r.bu)()],te.prototype,"totalCosts",void 0),(0,r.bt)([(0,r.eg)("totalCosts",["attributes"])],te.prototype,"readTotalCosts",null),(0,r.bt)([(0,r.bu)()],te.prototype,"totalDistance",void 0),(0,r.bt)([(0,r.bu)()],te.prototype,"totalDuration",void 0),(0,r.bt)([(0,r.bu)()],te.prototype,"totalLateDuration",void 0),(0,r.bt)([(0,r.bu)()],te.prototype,"totalViolations",void 0),(0,r.bt)([(0,r.eg)("totalViolations",["attributes"])],te.prototype,"readTotalViolations",null),(0,r.bt)([(0,r.bu)()],te.prototype,"totalWait",void 0),(0,r.bt)([(0,r.eg)("totalWait",["attributes"])],te.prototype,"readTotalWait",null),(0,r.bt)([(0,r.bu)()],te.prototype,"totalWaitDuration",void 0),(0,r.bt)([(0,r.bu)({readOnly:!0,json:{read:!1}})],te.prototype,"type",void 0),(0,r.bt)([(0,r.bu)()],te.prototype,"version",void 0),te=ee=(0,r.bt)([(0,r.bv)("esri.rest.support.RouteInfo")],te);const ie=te;var re;let se=re=class extends((0,r.cQ)(r.bw)){constructor(e){super(e),this.arriveCurbApproach=null,this.arriveTime=null,this.arriveTimeOffset=null,this.bearing=null,this.bearingTol=null,this.cumulativeCosts=null,this.cumulativeDistance=null,this.cumulativeDuration=null,this.curbApproach=null,this.departCurbApproach=null,this.departTime=null,this.departTimeOffset=null,this.distanceToNetworkInMeters=null,this.geometry=null,this.lateDuration=null,this.locationType=null,this.name=null,this.navLatency=null,this.objectId=null,this.popupTemplate=null,this.posAlong=null,this.routeName=null,this.serviceCosts=null,this.serviceDistance=null,this.serviceDuration=null,this.sequence=null,this.sideOfEdge=null,this.snapX=null,this.snapY=null,this.snapZ=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.timeWindowEnd=null,this.timeWindowEndOffset=null,this.timeWindowStart=null,this.timeWindowStartOffset=null,this.type="stop",this.violations=null,this.waitDuration=null,this.wait=null}readArriveTimeOffset(e,t){return P(t.attributes.ArriveTime,t.attributes.ArriveTimeUTC)}readCumulativeCosts(e,t){return W(t.attributes,"Cumul_")}readDepartTimeOffset(e,t){return P(t.attributes.DepartTime,t.attributes.DepartTimeUTC)}readServiceCosts(e,t){return W(t.attributes,"Attr_")}writeServiceCosts(e,t){L(e,t,"Attr_")}writeTimeWindowEnd(e,t){null!=e&&(t.attributes||(t.attributes={}),t.attributes.TimeWindowEnd=e.getTime())}writeTimeWindowStart(e,t){null!=e&&(t.attributes||(t.attributes={}),t.attributes.TimeWindowStart=e.getTime())}readViolations(e,t){return W(t.attributes,"Violation_")}readWait(e,t){return W(t.attributes,"Wait_")}static fromGraphic(e){return new re({arriveCurbApproach:null!=e.attributes.ArrivalCurbApproach?d.fromJSON(e.attributes.ArrivalCurbApproach):null,arriveTime:null!=e.attributes.ArrivalTime?new Date(e.attributes.ArrivalTime):null,arriveTimeOffset:e.attributes.ArrivalUTCOffset,cumulativeCosts:null!=e.attributes.CumulativeCosts?J(JSON.parse(e.attributes.CumulativeCosts)):null,cumulativeDistance:e.attributes.CumulativeMeters??null,cumulativeDuration:e.attributes.CumulativeMinutes??null,curbApproach:null!=e.attributes.CurbApproach?d.fromJSON(e.attributes.CurbApproach):null,departCurbApproach:null!=e.attributes.DepartureCurbApproach?d.fromJSON(e.attributes.DepartureCurbApproach):null,departTime:null!=e.attributes.DepartureTime?new Date(e.attributes.DepartureTime):null,departTimeOffset:e.attributes.DepartureUTCOffset??null,geometry:e.geometry,lateDuration:e.attributes.LateMinutes??null,locationType:null!=e.attributes.LocationType?m.fromJSON(e.attributes.LocationType):null,name:e.attributes.Name,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,routeName:e.attributes.RouteName,sequence:e.attributes.Sequence??null,serviceCosts:null!=e.attributes.ServiceCosts?J(JSON.parse(e.attributes.ServiceCosts)):null,serviceDistance:e.attributes.ServiceMeters??null,serviceDuration:e.attributes.ServiceMinutes??null,status:null!=e.attributes.Status?c.fromJSON(e.attributes.Status):null,symbol:e.symbol,timeWindowEnd:null!=e.attributes.TimeWindowEnd?new Date(e.attributes.TimeWindowEnd):null,timeWindowEndOffset:e.attributes.TimeWindowEndUTCOffset??null,timeWindowStart:null!=e.attributes.TimeWindowStart?new Date(e.attributes.TimeWindowStart):null,timeWindowStartOffset:e.attributes.TimeWindowStartUTCOffset??null,waitDuration:e.attributes.WaitMinutes??null})}toGraphic(){const e={ObjectID:this.objectId,ArrivalCurbApproach:null!=this.arriveCurbApproach?d.toJSON(this.arriveCurbApproach):null,ArrivalTime:null!=this.arriveTime?this.arriveTime.getTime():null,ArrivalUTCOffset:this.arriveTimeOffset,CumulativeCosts:null!=this.cumulativeCosts?JSON.stringify(B(this.cumulativeCosts)):null,CumulativeMeters:this.cumulativeDistance,CumulativeMinutes:this.cumulativeDuration,CurbApproach:null!=this.curbApproach?d.toJSON(this.curbApproach):null,DepartureCurbApproach:null!=this.departCurbApproach?d.toJSON(this.departCurbApproach):null,DepartureTime:null!=this.departTime?this.departTime.getTime():null,DepartureUTCOffset:this.departTimeOffset,LateMinutes:this.lateDuration,LocationType:null!=this.locationType?m.toJSON(this.locationType):null,Name:this.name,RouteName:this.routeName,Sequence:this.sequence,ServiceCosts:null!=this.serviceCosts?JSON.stringify(B(this.serviceCosts)):null,ServiceMeters:this.serviceDistance,ServiceMinutes:this.serviceDuration,Status:null!=this.status?c.toJSON(this.status):null,TimeWindowEnd:null!=this.timeWindowEnd?this.timeWindowEnd.getTime():null,TimeWindowEndUTCOffset:this.timeWindowEndOffset??this.arriveTimeOffset,TimeWindowStart:null!=this.timeWindowStart?this.timeWindowStart.getTime():null,TimeWindowStartUTCOffset:this.timeWindowStartOffset??this.arriveTimeOffset,WaitMinutes:this.waitDuration};return new r.a1({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};se.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"ArrivalCurbApproach",alias:"Arrival Curb Approach",type:"esriFieldTypeInteger"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time",type:"esriFieldTypeInteger"},{name:"CumulativeCosts",alias:"Cumulative Costs",type:"esriFieldTypeString"},{name:"CumulativeMeters",alias:"Cumulative Meters",type:"esriFieldTypeDouble"},{name:"CumulativeMinutes",alias:"Cumulative Minutes",type:"esriFieldTypeDouble"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureCurbApproach",alias:"Departure Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureTime",alias:"Departure Time",type:"esriFieldTypeDate"},{name:"DepartureUTCOffset",alias:"Departure Time",type:"esriFieldTypeInteger"},{name:"LateMinutes",alias:"Minutes Late",type:"esriFieldTypeDouble"},{name:"LocationType",alias:"Location Type",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ServiceCosts",alias:"Service Costs",type:"esriFieldTypeString"},{name:"ServiceMeters",alias:"Service Meters",type:"esriFieldTypeDouble"},{name:"ServiceMinutes",alias:"Service Minutes",type:"esriFieldTypeDouble"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"},{name:"TimeWindowEnd",alias:"Time Window End",type:"esriFieldTypeDate"},{name:"TimeWindowEndUTCOffset",alias:"Time Window End Offset",type:"esriFieldTypeInteger"},{name:"TimeWindowStart",alias:"Time Window Start",type:"esriFieldTypeDate"},{name:"TimeWindowStartUTCOffset",alias:"Time Window Start Offset",type:"esriFieldTypeInteger"},{name:"WaitMinutes",alias:"Minutes Wait",type:"esriFieldTypeDouble"}],(0,r.bt)([(0,r.bu)({type:d.apiValues,json:{read:{source:"attributes.ArrivalCurbApproach",reader:d.read}}})],se.prototype,"arriveCurbApproach",void 0),(0,r.bt)([(0,r.bu)({type:Date,json:{read:{source:"attributes.ArriveTimeUTC"}}})],se.prototype,"arriveTime",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"arriveTimeOffset",void 0),(0,r.bt)([(0,r.eg)("arriveTimeOffset",["attributes.ArriveTime","attributes.ArriveTimeUTC"])],se.prototype,"readArriveTimeOffset",null),(0,r.bt)([(0,r.bu)({json:{name:"attributes.Bearing",read:!1,write:!0}})],se.prototype,"bearing",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.BearingTol",read:!1,write:!0}})],se.prototype,"bearingTol",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"cumulativeCosts",void 0),(0,r.bt)([(0,r.eg)("cumulativeCosts",["attributes"])],se.prototype,"readCumulativeCosts",null),(0,r.bt)([(0,r.bu)()],se.prototype,"cumulativeDistance",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"cumulativeDuration",void 0),(0,r.bt)([(0,r.bu)({type:d.apiValues,json:{name:"attributes.CurbApproach",read:{reader:d.read},write:{writer:d.write}}})],se.prototype,"curbApproach",void 0),(0,r.bt)([(0,r.bu)({type:d.apiValues,json:{read:{source:"attributes.DepartCurbApproach",reader:d.read}}})],se.prototype,"departCurbApproach",void 0),(0,r.bt)([(0,r.bu)({type:Date,json:{read:{source:"attributes.DepartTimeUTC"}}})],se.prototype,"departTime",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"departTimeOffset",void 0),(0,r.bt)([(0,r.eg)("departTimeOffset",["attributes.DepartTime","attributes.DepartTimeUTC"])],se.prototype,"readDepartTimeOffset",null),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.DistanceToNetworkInMeters"}}})],se.prototype,"distanceToNetworkInMeters",void 0),(0,r.bt)([(0,r.bu)({type:r.D,json:{write:!0}})],se.prototype,"geometry",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"lateDuration",void 0),(0,r.bt)([(0,r.bu)({type:m.apiValues,json:{name:"attributes.LocationType",read:{reader:m.read},write:{writer:m.write}}})],se.prototype,"locationType",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.Name"}})],se.prototype,"name",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.NavLatency",read:!1,write:!0}})],se.prototype,"navLatency",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.ObjectID"}})],se.prototype,"objectId",void 0),(0,r.bt)([(0,r.bu)({type:r.ce})],se.prototype,"popupTemplate",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.PosAlong"}}})],se.prototype,"posAlong",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.RouteName"}})],se.prototype,"routeName",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"serviceCosts",void 0),(0,r.bt)([(0,r.eg)("serviceCosts",["attributes"])],se.prototype,"readServiceCosts",null),(0,r.bt)([(0,r.eO)("serviceCosts")],se.prototype,"writeServiceCosts",null),(0,r.bt)([(0,r.bu)()],se.prototype,"serviceDistance",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"serviceDuration",void 0),(0,r.bt)([(0,r.bu)({json:{name:"attributes.Sequence"}})],se.prototype,"sequence",void 0),(0,r.bt)([(0,r.bu)({type:y.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:y.read}}})],se.prototype,"sideOfEdge",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.SnapX"}}})],se.prototype,"snapX",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.SnapY"}}})],se.prototype,"snapY",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.SnapZ"}}})],se.prototype,"snapZ",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.SourceID"}}})],se.prototype,"sourceId",void 0),(0,r.bt)([(0,r.bu)({json:{read:{source:"attributes.SourceOID"}}})],se.prototype,"sourceOid",void 0),(0,r.bt)([(0,r.bu)({type:c.apiValues,json:{read:{source:"attributes.Status",reader:c.read}}})],se.prototype,"status",void 0),(0,r.bt)([(0,r.bu)({types:r.om})],se.prototype,"symbol",void 0),(0,r.bt)([(0,r.bu)({type:Date,json:{name:"attributes.TimeWindowEnd"}})],se.prototype,"timeWindowEnd",void 0),(0,r.bt)([(0,r.eO)("timeWindowEnd")],se.prototype,"writeTimeWindowEnd",null),(0,r.bt)([(0,r.bu)()],se.prototype,"timeWindowEndOffset",void 0),(0,r.bt)([(0,r.bu)({type:Date,json:{name:"attributes.TimeWindowStart"}})],se.prototype,"timeWindowStart",void 0),(0,r.bt)([(0,r.eO)("timeWindowStart")],se.prototype,"writeTimeWindowStart",null),(0,r.bt)([(0,r.bu)()],se.prototype,"timeWindowStartOffset",void 0),(0,r.bt)([(0,r.bu)({readOnly:!0,json:{read:!1}})],se.prototype,"type",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"violations",void 0),(0,r.bt)([(0,r.eg)("violations",["attributes"])],se.prototype,"readViolations",null),(0,r.bt)([(0,r.bu)()],se.prototype,"waitDuration",void 0),(0,r.bt)([(0,r.bu)()],se.prototype,"wait",void 0),(0,r.bt)([(0,r.eg)("wait",["attributes"])],se.prototype,"readWait",null),se=re=(0,r.bt)([(0,r.bv)("esri.rest.support.Stop")],se);const ae=se}}]);
//# sourceMappingURL=1555.580d94f7.js.map