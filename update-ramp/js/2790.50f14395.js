"use strict";(self["webpackChunkramp_website"]=self["webpackChunkramp_website"]||[]).push([[2790],{52790:function(e,t,i){i.r(t),i.d(t,{default:function(){return de}});var n=i(44444),s=i(74506),r=i(6255),a=i(55209);const o=8,l=256;let c=0,u=class extends n.bw{constructor(){super(...arguments),this._tileFetchQueue=new n.oO({concurrency:32,process:(e,t)=>this._fetchRawTile(e.pyramidLevel,e.row,e.col,{...e.options,signal:t})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}normalizeCtorArgs(e){return e?.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:n.gJ.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=(0,r.V)(e.spatialReference);return null!=t&&e.extent.width>=t/2}get _hasNoneOrGCSShiftTransform(){const{transform:e}=this.rasterInfo;return null==e||"gcs-shift"===e.type}set rasterJobHandler(e){this._set("rasterJobHandler",e),"Function"===this.datasetFormat&&this.primaryRasters?.rasters?.forEach((t=>t.rasterJobHandler=e))}get rasterId(){return this.url||"rasterId-"+c++}set url(e){this._set("url",(0,n.oP)(e,n.G.getLogger(this)))}async open(e){return this._openPromise??=(0,r.v)().then((()=>this._open(e))),this._openPromise}async fetchTile(e,t,i,n={}){const s=n.tileInfo||this.rasterInfo.storageInfo.tileInfo,r=this.getTileExtentFromTileInfo(e,t,i,s);return n={noClip:!0,...n},this.fetchPixels(r,s.size[0],s.size[1],n)}async identify(e,t={}){e=(0,n.aZ)(n.D,e).clone().normalize();const{multidimensionalDefinition:i,timeExtent:a}=t,{rasterInfo:o}=this,{hasMultidimensionalTranspose:l,multidimensionalInfo:c}=o;let{transposedVariableName:u}=t;const h=null!=c&&l&&(null!=a||(0,n.oQ)(i));h&&!u&&(u=null!=i&&i.length>0?i[0].variableName??void 0:c.variables[0].name,t={...t,transposedVariableName:u}),t=this._getRequestOptionsWithSliceId(t);const{spatialReference:f,extent:d}=o,{datumTransformation:p}=t;let m=(0,r.I)(e,f,p);if(!d.intersects(m))return{location:m,value:null};if(null!=o.transform){const e=o.transform.inverseTransform(m);if(!o.nativeExtent.intersects(e))return{location:e,value:null};m=e}let y=0;const g=null!=u&&null!=c&&o.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){const e=this.primaryRasters.rasters[0];if(g)return e.identify(m,t);const{pixelSize:s}=o,r=3,a=s.x*r/2,l=s.y*r/2,c=new n.bn({xmin:m.x-a,xmax:m.x+a,ymin:m.y-l,ymax:m.y+l,spatialReference:f}),u={interpolation:"nearest",multidimensionalDefinition:i,sliceId:t.sliceId},{pixelBlock:h}=await e.fetchPixels(c,r,r,u),{pixelBlock:d}=await this.fetchPixels(c,r,r,u);if(null==h)return{location:m,value:null};const p=Math.floor(r*r*.5),y=!h.mask||h.mask[p]?h.pixels.map((e=>e[p])):null;let x;return null!=d&&(x=!d.mask||d.mask[p]?d.pixels.map((e=>e[p])):void 0),{location:m,value:y,processedValue:x,pyramidLevel:0}}if(!g)if(t.srcResolution)y=(0,r.l)(t.srcResolution,o,this.ioConfig.sampling).pyramidLevel;else if(y=await this.computeBestPyramidLevelForLocation(e,t),null==y)return{location:m,value:null};const x=this.identifyPixelLocation(m,y,null,g);if(null===x)return{location:m,value:null};const{row:b,col:w,rowOffset:I,colOffset:R,blockWidth:v}=x,S=u??t.sliceId,T=(0,s.i)(this.rasterId,S),_=`${y}/${b}/${w}`;let k=(0,s.m)(T,null,_);null==k&&(k=this.fetchRawTile(y,b,w,t),(0,s.x)(T,null,_,k));const F=await k;if(!F?.pixels?.length)return{location:m,value:null};const C=I*v+R;return this._processIdentifyResult(F,{srcLocation:m,position:C,pyramidLevel:y,useTransposedTile:!!g,requestSomeSlices:h,identifyOptions:t})}async fetchPixels(e,t,i,s={}){e=(0,r.a)(e),s=this._getRequestOptionsWithSliceId(s);const{_hasNoneOrGCSShiftTransform:a}=this;if(s.requestRawData&&a)return this._fetchPixels(e,t,i,s);const o=(0,r.V)(e.spatialReference),l=(0,r.e)(e);if(null==o||0===l||1===l&&this._isGlobalWrappableSource&&a)return this._fetchPixels(e,t,i,s);if(l>=3)return{extent:e,pixelBlock:null};const c=[],{xmin:u,xmax:h}=e,f=Math.round(o/(h-u)*t),d=f-Math.round((o/2-u)/(h-u)*t);let p=0;const m=[];for(let r=0;r<=l;r++){const a=new n.bn({xmin:0===r?u:-o/2,xmax:r===l?h-o*r:o/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),y=0===r?f-d:r===l?t-p:f;p+=y,m.push(y);const g=s.disableWrapAround&&r>0?null:this._fetchPixels(a,y,i,s);c.push(g)}const y=(await Promise.all(c)).map((e=>e?.pixelBlock));let g=null;const x={width:t,height:i};return g=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:y,srcMosaicSize:x,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:m},s)).pixelBlock:(0,n.iP)(y,x,{blockWidths:m}),{extent:e,srcExtent:(0,r.K)(e,this.rasterInfo.spatialReference,s.datumTransformation),pixelBlock:g}}async fetchRawPixels(e,t,i,s={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const r=await this._fetchRawTiles(e,t,i,s),{nativeExtent:a,nativePixelSize:o,storageInfo:l}=this.rasterInfo,c=2**e,u=o.x*c,h=o.y*c,f=new n.bn({xmin:a.xmin+u*t.x,xmax:a.xmin+u*(t.x+i.width-1),ymin:a.ymax-h*(t.y+i.height-1),ymax:a.ymax-h*t.y,spatialReference:a.spatialReference});if(!r)return{extent:f,srcExtent:f,pixelBlock:null};const{pixelBlocks:d,mosaicSize:p}=r;if(1===d.length&&null!=d[0]&&d[0].width===i.width&&d[0].height===i.height)return{extent:f,srcExtent:f,pixelBlock:r.pixelBlocks[0]};const m=e>0?l.pyramidBlockWidth:l.blockWidth,y=e>0?l.pyramidBlockHeight:l.blockHeight,g={x:t.x%m,y:t.y%y};let x;return x=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:d,srcMosaicSize:p,destDimension:i,clipOffset:g,clipSize:i,coefs:null,sampleSpacing:null,interpolation:s.interpolation,alignmentInfo:null,blockWidths:null},s)).pixelBlock:(0,n.iP)(d,p,{clipOffset:g,clipSize:i}),{extent:f,srcExtent:f,pixelBlock:x}}fetchRawTile(e,t,i,s){throw new n.s("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return(0,r.K)(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?(0,n.iK)(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i=0){const{customFetchParameters:s}=this.ioConfig,{range:r,query:a,headers:o}=t;i=i??t.retryCount??this.ioConfig.retryCount;const l=r?{Range:`bytes=${r.from}-${r.to}`}:null;try{return await(0,n.U)(e,{...t,query:{...a,...s},headers:{...o,...l}})}catch(c){if(i>0)return i--,this.request(e,t,i);throw c}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return null==t||null==e||0===e.length?null:(0,n.oR)(e,t)}getTileExtentFromTileInfo(e,t,i,n){const s=n.lodAt(e);return this.getTileExtent({x:s.resolution,y:s.resolution},t,i,n.origin,n.spatialReference,n.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:s}=this.rasterInfo,{pyramidResolutions:r}=e;if(!e.tileInfo){const a=[],o=e.maximumPyramidLevel||0;let l=(s.x+s.y)/2,c=1/.0254*96*l;for(let e=0;e<=o&&(a.unshift(new n.he({level:o-e,resolution:l,scale:c})),e!==o);e++)if(r){const t=(r[e].x+r[e].y)/2;c*=t/l,l=t}else l*=2,c*=2;const u=new n.D({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new n.gJ({origin:u,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:a}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,s){const{width:r,height:a,nativeExtent:o,pixelSize:l,spatialReference:c}=e,u=new n.D({x:o.xmin,y:o.ymax,spatialReference:c});null==s&&(s=Math.max(0,Math.round(Math.log(Math.max(r,a))/Math.LN2-8)));const h=this.computeBlockBoundary(o,512,512,{x:o.xmin,y:o.ymax},[l],s);e.storageInfo=new n.oS({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:u,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:h})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,n,s,r=0,a=2){if(1===s.length&&r>0){s=[...s];let{x:e,y:t}=s[0];for(let i=0;i<r;i++)e*=a,t*=a,s.push({x:e,y:t})}const o=[],{x:l,y:c}=n;for(let u=0;u<s.length;u++){const{x:n,y:r}=s[u];o.push({minCol:Math.floor((e.xmin-l+.1*n)/t/n),maxCol:Math.floor((e.xmax-l-.1*n)/t/n),minRow:Math.floor((c-e.ymax+.1*r)/i/r),maxRow:Math.floor((c-e.ymin-.1*r)/i/r)})}return o}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:n}=this.rasterInfo.storageInfo;if(0===e)return t;if(null!=i&&i.length)return i[e-1];const s=n**e;return{x:t.x*s,y:t.y*s}}identifyPixelLocation(e,t,i,n){const{spatialReference:s,nativeExtent:a,storageInfo:o}=this.rasterInfo,{maximumPyramidLevel:l,origin:c,transposeInfo:u}=o,h=n&&null!=u?u.tileSize[0]:o.blockWidth,f=n&&null!=u?u.tileSize[1]:o.blockHeight,d=(0,r.I)(e,s,i);if(!a.intersects(d)||t<0||t>l)return null;const p=this.getPyramidPixelSize(t),{x:m,y:y}=p,g=(c.y-d.y)/y/f,x=(d.x-c.x)/m/h,b=Math.min(f-1,Math.floor((g-Math.floor(g))*f)),w=Math.min(h-1,Math.floor((x-Math.floor(x))*h));return{pyramidLevel:t,row:Math.floor(g),col:Math.floor(x),rowOffset:b,colOffset:w,blockWidth:h,srcLocation:d}}getTileExtent(e,t,i,s,r,a){const[o,l]=a,c=s.x+i*o*e.x,u=c+o*e.x,h=s.y-t*l*e.y,f=h-l*e.y;return new n.bn({xmin:c,xmax:u,ymin:f,ymax:h,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const n=this.rasterInfo.storageInfo.blockBoundary[e];return!n||n.maxRow<t||n.maxCol<i||n.minRow>t||n.minCol>i}updateImageSpaceRasterInfo(e){const{pixelSize:t}=e,{width:i,height:s}=e,r=n.aY.WebMercator;e.spatialReference=r,e.extent=e.nativeExtent=new n.bn({xmin:-.5,ymax:.5,xmax:i-.5,ymin:.5-s,spatialReference:r}),e.isPseudoSpatialReference=!0,e.transform=null,e.pixelSize=new n.D({x:1,y:1,spatialReference:r});const{extent:a,storageInfo:o}=e;if(o){o.origin=new n.D({x:a.xmin,y:a.ymax,spatialReference:r});const{pyramidResolutions:i,tileInfo:s}=o;if(i&&i.forEach((e=>{e.x/=t.x,e.y/=t.y})),s){s.origin=o.origin;const t=(e.nativePixelSize.x+e.nativePixelSize.y)/2;s.lods.forEach(((e,i)=>{e.resolution=t*2**i,e.scale=96*e.resolution/.0254}))}}}async _fetchPixels(e,t,i,s={}){let a=(0,r.e)(e);if(a>=2)return{extent:e,pixelBlock:null};const o=this._getSourceDataInfo(e,t,i,s),{pyramidLevel:l,srcResolution:c,srcExtent:u,srcWidth:f,srcHeight:d,ul:p}=o;if(0===f||0===d)return{extent:e,srcExtent:u,pixelBlock:null};const{rasterInfo:m}=this,y=m.transform,g="gcs-shift"===y?.type,x=null!=(0,r.V)(e.spatialReference);!g&&x||(a=(0,r.e)(o.srcExtent,g));const b=await this._fetchRawTiles(l,p,{width:f,height:d,wrapCount:a},s);if(!b)return{extent:e,srcExtent:u,pixelBlock:null};const w=m.storageInfo,I=l>0?w.pyramidBlockWidth:w.blockWidth,R=l>0?w.pyramidBlockHeight:w.blockHeight;let{x:v,y:S}=m.pixelSize;if(l>0){const{pyramidResolutions:e,pyramidScalingFactor:t}=w;if(null!=e&&e[l-1])({x:v,y:S}=e[l-1]);else{const e=t**l;v*=e,S*=e}}const T=m.spatialReference,_=new n.D({x:v,y:S,spatialReference:T}),k=I===f&&R===d&&p.x%I==0&&p.y%R==0,F=new n.D({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),C=!e.spatialReference.equals(T),M=T.isGeographic?1e-9:1e-4,{datumTransformation:O}=s;if(!C&&k&&1===b.pixelBlocks.length&&I===t&&R===i&&h(c,F,M))return{extent:e,srcExtent:u,srcTilePixelSize:_,pixelBlock:b.pixelBlocks[0]};const P=x&&null!=(0,r.V)(u.spatialReference)&&this._hasNoneOrGCSShiftTransform,D=s.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");D&&!this.rasterJobHandler&&await(0,r.v)();const B=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:b.extent,pixelSize:F.toJSON(),datumTransformation:O,rasterTransform:y,hasWrapAround:a>0||P,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:D},s):(0,r.i)({projectedExtent:e,srcBufferExtent:b.extent,pixelSize:F,datumTransformation:O,rasterTransform:y,hasWrapAround:a>0||P,isAdaptive:!1,includeGCSGrid:D});let N;const J=!s.requestRawData,E={rows:B.spacing[0],cols:B.spacing[1]},A=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(l,b.extent.xmin):void 0,{pixelBlocks:H,mosaicSize:L,isPartiallyFilled:z}=b;let W=null;if(this.rasterJobHandler)({pixelBlock:N,localNorthDirections:W}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:H,srcMosaicSize:L,destDimension:J?{width:t,height:i}:null,coefs:J?B.coefficients:null,sampleSpacing:J?E:null,projectDirections:D,gcsGrid:D?B.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:s.interpolation,alignmentInfo:A,blockWidths:null},s));else{const e=(0,n.iP)(H,L,{alignmentInfo:A});N=J?(0,n.iQ)(e,{width:t,height:i},B.coefficients,E,s.interpolation):e,D&&B.gcsGrid&&(W=(0,n.iR)({width:t,height:i},B.gcsGrid),N=(0,n.iS)(N,this.rasterInfo.dataType,W))}return s.requestRawData||D?{extent:e,srcExtent:u,srcTilePixelSize:_,pixelBlock:N,transformGrid:B,localNorthDirections:W,isPartiallyFilled:z}:{extent:e,srcExtent:u,srcTilePixelSize:_,pixelBlock:N}}async _fetchRawTiles(e,t,i,s){const{origin:r,blockBoundary:a}=this.rasterInfo.storageInfo,{blockWidth:o,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:u}=t,{width:h,height:f,wrapCount:d}=i;const p=this._getRasterTileAlignmentInfo(e,0);s.buffer&&(c-=s.buffer.cols,u-=s.buffer.rows,h+=2*s.buffer.cols,f+=2*s.buffer.rows);let m=0,y=0,g=0;d&&null!=p&&(({worldColumnCountFromOrigin:y,originColumnOffset:g,rightPadding:m}=p),y*p.blockWidth-m>=c+h&&(m=0));const x=Math.floor(c/o),b=Math.floor(u/l),w=Math.floor((c+h+m-1)/o),I=Math.floor((u+f+m-1)/l),R=a[e];if(!R)return null;const{minRow:v,minCol:S,maxCol:T,maxRow:_}=R;if(0===d&&(I<v||w<S||b>_||x>T))return null;const k=new Array;let F=!1;const C=null==this.ioConfig.allowPartialFill?s.allowPartialFill:this.ioConfig.allowPartialFill;for(let n=b;n<=I;n++)for(let t=x;t<=w;t++){let i=t;if(!s.disableWrapAround&&d&&null!=p&&y<=t&&(i=t-y-g),n>=v&&i>=S&&_>=n&&T>=i){const t=this._tileFetchQueue.push({pyramidLevel:e,row:n,col:i,options:s},{signal:s.signal});C?k.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{F=!0,e(null)}))}))):k.push(t)}else k.push(Promise.resolve(null))}if(0===k.length)return null;const M=await Promise.all(k),O={height:(I-b+1)*l,width:(w-x+1)*o},{spatialReference:P}=this.rasterInfo,D=this.getPyramidPixelSize(e),{x:B,y:N}=D;return{extent:new n.bn({xmin:r.x+x*o*B,xmax:r.x+(w+1)*o*B,ymin:r.y-(I+1)*l*N,ymax:r.y-b*l*N,spatialReference:P}),pixelBlocks:M,mosaicSize:O,isPartiallyFilled:F}}_fetchRawTile(e,t,i,r){const a=this.rasterInfo.storageInfo.blockBoundary[e];if(!a)return Promise.resolve(null);const{minRow:o,minCol:l,maxCol:c,maxRow:u}=a;if(t<o||i<l||t>u||i>c)return Promise.resolve(null);const h=(0,s.i)(this.rasterId,r.sliceId),f=`${e}/${t}/${i}`;let d=(0,s.m)(h,r.registryId,f);if(null==d){const n=new AbortController;d=this.fetchRawTile(e,t,i,{...r,signal:n.signal}),(0,s.x)(h,r.registryId,f,d,n),d.catch((()=>(0,s.h)(h,r.registryId,f)))}return r.signal&&(0,n.l9)(r,(()=>{(0,s.s)(h,r.registryId,f)})),d}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if((2!==t||"vector-magdir"!==i)&&"vector-uv"!==i||2!==e?.length||!e[0]?.length)return null;const s=e[0].length;if("vector-magdir"===i){const t=e[1].map((e=>(e+360)%360));return[e[0],t]}const[r,a]=e,o=[],l=[];for(let c=0;c<s;c++){const[e,t]=(0,n.oT)([r[c],a[c]]);o.push(e),l.push(t)}return[o,l]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlignmentInfo&&(this._rasterTileAlignmentInfo=(0,r.t)(this.rasterInfo)),null==this._rasterTileAlignmentInfo.pyramidsInfo?null:{startX:t,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i,s={}){const a={datumTransformation:s.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};s.srcResolution&&(a.srcResolution=s.srcResolution,this._updateSourceDataInfo(e,a));const o=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:l,srcHeight:c,pyramidLevel:u}=a,h=l/t,f=c/i,d=u<o&&h*f>=16,p=u===o&&this._requireTooManySrcTiles(l,c,t,i);if(d||p||0===l||0===c){const l=new n.D({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let c=(0,r.C)(l,this.rasterInfo.spatialReference,e,a.datumTransformation);const p=!c||s.srcResolution&&c.x+c.y<s.srcResolution.x+s.srcResolution.y;if(d&&s.srcResolution&&p){const e=Math.round(Math.log(Math.max(h,f))/Math.LN2)-1;if(o-u+3>=e){const t=2**e;c={x:s.srcResolution.x*t,y:s.srcResolution.y*t}}}c&&(a.srcResolution=c,this._updateSourceDataInfo(e,a))}return this._requireTooManySrcTiles(a.srcWidth,a.srcHeight,t,i)&&(a.srcWidth=0,a.srcHeight=0),a}_requireTooManySrcTiles(e,t,i,n){const{tileInfo:s}=this.rasterInfo.storageInfo,r=Math.ceil(e/s.size[0])*Math.ceil(t/s.size[1]),a=e/i,c=t/n,u=Math.max(1,(i+n)/1024);return r>=l*u||a>o||c>o}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const{rasterInfo:i}=this,n=i.spatialReference,{srcResolution:s,datumTransformation:a}=t,{pyramidLevel:o,pyramidResolution:l,excessiveReading:c}=(0,r.l)(s,i,this.ioConfig.sampling);if(c)return;let u=t.srcExtent||(0,r.K)(e,n,a);if(null==u)return;const h=i.transform;h&&(u=h.inverseTransform(u)),t.srcExtent=u;const{x:f,y:d}=i.storageInfo.origin,p=Math.floor((u.xmin-f)/l.x+.1),m=Math.floor((d-u.ymax)/l.y+.1),y=Math.floor((u.xmax-f)/l.x-.1),g=Math.floor((d-u.ymin)/l.y-.1),x=u.width<.1*l.x?0:y-p+1,b=u.height<.1*l.y?0:g-m+1;t.pyramidLevel=o,t.pyramidResolution=l,t.srcWidth=x,t.srcHeight=b,t.ul={x:p,y:m}}_getRequestOptionsWithSliceId(e){return null!=this.rasterInfo.multidimensionalInfo&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:s,pyramidLevel:r,useTransposedTile:a}=t,o=e.pixels[0].length/e.width/e.height;if(e.mask&&!e.mask[s])return{location:i,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(null==l||!a){const t=e.pixels.map((e=>e[s])),n={location:i,value:t,pyramidLevel:r},a=this._computeMagDirValues(t.map((e=>[e])));return a?.length&&(n.magdirValue=a.map((e=>e[0]))),n}let c=e.pixels.map((e=>e.slice(s*o,s*o+o))),u=this._computeMagDirValues(c);const{requestSomeSlices:h,identifyOptions:f}=t;let d=(0,n.oU)(l,f.transposedVariableName);if(h){const e=(0,n.oV)(d,f.multidimensionalDefinition,f.timeExtent);c=c.map((t=>e.map((e=>t[e])))),u=u?.map((t=>e.map((e=>t[e])))),d=e.map((e=>d[e]))}const p=e.noDataValues||this.rasterInfo.noDataValue,m={pixels:c,pixelType:e.pixelType};let y;return null!=p&&((0,n.oW)(m,p),y=m.mask),{location:i,value:null,dataSeries:d.map(((e,t)=>{const i={value:0===y?.[t]?null:c.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition.map((e=>new n.oX({...e,isSlice:!0})))};return u?.length&&(i.magdirValue=[u[0][t],u[1][t]]),i})),pyramidLevel:r}}};function h(e,t,i){return Math.abs(e.x-t.x)<i&&Math.abs(e.y-t.y)<i}(0,n.bt)([(0,n.bu)()],u.prototype,"_rasterTileAlignmentInfo",void 0),(0,n.bt)([(0,n.bu)()],u.prototype,"_tileFetchQueue",void 0),(0,n.bt)([(0,n.bu)({readOnly:!0})],u.prototype,"_isGlobalWrappableSource",null),(0,n.bt)([(0,n.bu)({readOnly:!0})],u.prototype,"_hasNoneOrGCSShiftTransform",null),(0,n.bt)([(0,n.bu)()],u.prototype,"_openPromise",void 0),(0,n.bt)([(0,n.bu)()],u.prototype,"rasterJobHandler",null),(0,n.bt)([(0,n.bu)({readOnly:!0})],u.prototype,"rasterId",null),(0,n.bt)([(0,n.bu)(n.ej)],u.prototype,"url",null),(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],u.prototype,"datasetName",void 0),(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],u.prototype,"datasetFormat",void 0),(0,n.bt)([(0,n.bu)()],u.prototype,"hasUniqueSourceStorageInfo",void 0),(0,n.bt)([(0,n.bu)()],u.prototype,"rasterInfo",void 0),(0,n.bt)([(0,n.bu)()],u.prototype,"ioConfig",void 0),(0,n.bt)([(0,n.bu)()],u.prototype,"sourceJSON",void 0),u=(0,n.bt)([(0,n.bv)("esri.layers.support.rasterDatasets.BaseRaster")],u);const f=u,d=40;let p=class extends f{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._clippingGeometry=new Map}async fetchPixels(e,t,i,s={}){const{rasters:r,rasterIds:o}=this.primaryRasters;let l=!1;const{interpolation:c}=s,u=this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;!s.requestRawData&&u&&(l=1===r.length&&!s.skipRasterFunction,s={...s,interpolation:"bilinear",requestRawData:l});const h=r.map((n=>n.fetchPixels(e,t,i,s))),f=await Promise.all(h),d=f.map((e=>e.pixelBlock)),p=l||s.requestRawData?f.map((e=>e.srcTilePixelSize)):null;if(s.skipRasterFunction||d.every((e=>null==e)))return f[0];const m=f.find((e=>null!=e.pixelBlock))?.extent??e;let y=this.rasterJobHandler?await this.rasterJobHandler.process({extent:m,primaryPixelBlocks:d,primaryPixelSizes:p,primaryRasterIds:o}):this.rasterFunction.process({extent:m,primaryPixelBlocks:d,primaryPixelSizes:p,primaryRasterIds:o});const{transformGrid:g}=f[0];if(!l||null==y||null==g){const e=s.noClip?null:this.getClippingGeometry(m.spatialReference);return s.noClip||s.requestRawData||null==y||!e||(y=await(0,a.h)(y,m,e)),{...f[0],pixelBlock:y}}const x={rows:g.spacing[0],cols:g.spacing[1]};let b;b=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[y],srcMosaicSize:{width:y.width,height:y.height},destDimension:{width:t,height:i},coefs:g.coefficients,sampleSpacing:x,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:c,alignmentInfo:void 0,blockWidths:null},s)).pixelBlock:(0,n.iQ)(y,{width:t,height:i},g.coefficients,x,c);const w=s.noClip?null:this.getClippingGeometry(e.spatialReference);return s.noClip||s.requestRawData||null==b||null==w||(b=await(0,a.h)(b,e,w)),{extent:e,srcExtent:f[0].srcExtent,pixelBlock:b}}getClippingGeometry(e){const t=this._clippingGeometry.get("0");if(!e||!t)return t;const i=g(e);let n=this._clippingGeometry.get(i);return null!=n||(n=e.equals(t.spatialReference)?t:(0,r.D)(t,e),this._clippingGeometry.set(i,n)),n}async _open(e){const{rasterFunction:t}=this;this.primaryRasters?.rasters?.length?t.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=t.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach((e=>e.rasterJobHandler=this.rasterJobHandler)));const{rasters:i,rasterIds:s}=this.primaryRasters,r=i.map((t=>t.rasterInfo?void 0:t.open(e)));await Promise.all(r);const a=i.map((({rasterInfo:e})=>e)),o=t.bind({rasterInfos:a,rasterIds:s});if(t.rawSourceRasterInfos=a,!o.success||0===a.length)throw new n.s("raster-function:open",`cannot bind the function: ${o.error??""}`);const l="Table"===t.functionName?t:t.functionArguments?.raster;"Table"===l?.functionName&&(t.rasterInfo.attributeTable=n.bx.fromJSON(l.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const c=a[0];this.hasUniqueSourceStorageInfo=1===a.length||a.slice(1).every((e=>y(e,c))),this.set("sourceJSON",i[0].sourceJSON),this.set("rasterInfo",t.rasterInfo),await this._updateClipGeometry()}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async _updateClipGeometry(){const e=this.rasterFunction.getClippingGeometries()[0];let t=e?.clippingGeometry;if(t&&"inside"===e.clippingType){const{extent:e}=this.rasterInfo,{difference:s,densify:a}=await Promise.all([i.e(6239),i.e(2518)]).then(i.bind(i,2518));let o=a(n.a$.fromExtent(e),2*(e.width+e.height)/d);o=(0,r.D)(o,t.spatialReference),t=s(o,t)}this._clippingGeometry.clear(),t&&this._clippingGeometry.set("0",t)}};(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],p.prototype,"datasetFormat",void 0),(0,n.bt)([(0,n.bu)()],p.prototype,"tileType",void 0),(0,n.bt)([(0,n.bu)()],p.prototype,"rasterFunction",void 0),(0,n.bt)([(0,n.bu)()],p.prototype,"primaryRasters",void 0),p=(0,n.bt)([(0,n.bv)("esri.layers.support.rasterDatasets.FunctionRaster")],p);const m=p;function y(e,t){const{storageInfo:i,pixelSize:n,spatialReference:s,extent:r}=e,{storageInfo:a,pixelSize:o,spatialReference:l,extent:c}=t;return n.x===o.x&&n.y===o.y&&s.equals(l)&&r.equals(c)&&i.blockHeight===a.blockHeight&&i.blockWidth===a.blockWidth&&i.maximumPyramidLevel===a.maximumPyramidLevel}function g(e){return String(e.wkid??e.wkt??e.wkt2)}const x=e=>{let t=class extends e{constructor(...e){super(...e),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation=null,this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster="Function"===e[0]?.raster?.datasetFormat}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(e){this._set("multidimensionalDefinition",e),this.updateRenderer()}set rasterFunction(e){"none"===e?.functionName?.toLowerCase()&&(e=void 0),this._set("rasterFunction",e),this.updateRasterFunction()}get rasterInfo(){return(0,n.p1)(n.G.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(e){this._set("url",(0,n.oP)(e,n.G.getLogger(this)))}get renderer(){if("imagery-tile"!==this.type)return this.internalRenderer;const{activePresetRendererName:e,presetRenderers:t}=this;return e?t?.find((({name:t})=>t===e))?.renderer.clone():this.internalRenderer}set renderer(e){"imagery-tile"===this.type&&(this.activePresetRendererName=null),this.internalRenderer=e}set internalRenderer(e){null==e&&null==this.rasterFunction?this._configDefaultRenderer("override"):(this._set("internalRenderer",e),this.updateRenderer())}readRenderer(e,t,i){const s=t?.layerDefinition?.drawingInfo?.renderer;return(0,n.p2)(s,i)||void 0}async convertVectorFieldData(e,t){const{serviceRasterInfo:i}=this;if(null==e||!i)return null;const s=this._rasterJobHandler.instance,r=i.dataType;return s?s.convertVectorFieldData({pixelBlock:e,dataType:r},t):(0,n.iI)(e,r)}async computeStatisticsHistograms(e,t){await this.load(t),e=(0,n.aZ)(n.p3,e).clone();const{serviceRasterInfo:i}=this;if(null==i)throw new n.s("imagery-tile-mixin:compute-statistics-histograms","serviceRasterInfo must be specified");const{geometry:s}=e;if(null==s)throw new n.s("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let o=s;const{spatialReference:l}=i;s.spatialReference.equals(l)||(await(0,r.v)(),o="extent"===s.type?(0,r.K)(s,l):(0,r.D)(s,l));const c=e.pixelSize??new n.D({x:i.pixelSize.x,y:i.pixelSize.y,spatialReference:l}),{extent:u,width:h,height:f}=(0,a.l)(i,o,c),d=await this.fetchPixels(u,h,f,{...t,interpolation:"nearest"});if(null==d.pixelBlock)throw new n.s("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const p=await(0,a.h)(d.pixelBlock,u,o),m=this._rasterJobHandler.instance;return m?m.computeStatisticsHistograms({pixelBlock:p},t):(0,n.iJ)(p)}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):(0,n.iT)(e.meshType,e.simulationSettings,e.flowData,null!=t.signal?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.serviceRasterInfo??{};if(null==t)return e;let i=e.multidimensionalDefinition||this.multidimensionalDefinition;i?.length||(i=(0,n.p4)(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const s=e.timeExtent||this.timeExtent;if(null!=i&&null!=s&&(null!=s.start||null!=s.end)){i=i.map((e=>e.clone()));const n=t.variables.find((({name:e})=>e===i[0].variableName))?.dimensions?.find((({name:e})=>"StdTime"===e)),r=i.find((({dimensionName:e})=>"StdTime"===e));if(!n||!r)return{...e,multidimensionalDefinition:null};const{start:a,end:o}=s,l=null==a?null:a.getTime(),c=null==o?null:o.getTime(),u=l??c,h=c??l;if(null!=n.values){const e=n.values.filter((e=>{if(Array.isArray(e)){if(u===h)return e[0]<=u&&e[1]>=u;const t=e[0]<=u&&e[1]>u||e[0]<h&&e[1]>=h,i=e[0]>=u&&e[1]<=h||e[0]<u&&e[1]>h;return t||i}return u===h?e===u:e>=u&&e<=h}));if(e.length){const t=e.sort(((e,t)=>{const i=Array.isArray(e)?e[0]:e,n=Array.isArray(e)?e[1]:e,s=Array.isArray(t)?t[0]:t,r=Array.isArray(t)?t[1]:t;return u===h?i-s:Math.abs(n-h)-Math.abs(r-h)}))[0];r.values=[t]}else i=null}else if(n.hasRegularIntervals&&n.extent){const[e,t]=n.extent;u>t||h<e?i=null:r.values=u===h?[u]:[Math.max(e,u),Math.min(t,h)]}}return null!=i&&(0,n.p5)(i,this.multidimensionalSubset)?{...e,multidimensionalDefinition:null}:{...e,multidimensionalDefinition:i}}async updateRasterFunction(){if(!this.loaded||"imagery-tile"!==this.type||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&"Function"===this.raster.datasetFormat){const e=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&e&&this._set("rasterFunction",n.o_.fromJSON(e)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let e,t=this.raster,i=!1;"Function"===t.datasetFormat?(e=t.primaryRasters.rasters,t=e[0],i=!0):e=[t];const{rasterFunction:s}=this;if(s){const i={raster:t};e.length>1&&e.forEach((e=>i[e.url]=e));const n=(0,a.T)(s.functionDefinition?.toJSON()??s.toJSON(),i),r=new m({rasterFunction:n});r.rasterJobHandler=this._rasterJobHandler.instance,await r.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=r}else this.raster=t,this._cachedRasterFunctionJson=null,await t.open();if(this._cachedRendererJson=null,!i&&!s)return;const{bandIds:r}=this,{bandCount:o}=this.raster.rasterInfo,l=r?.length?r.some((e=>e>=o)):o>=3;r&&(l||this.renderer&&"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:e,symbolizer:t}=this;if(!e||!t||!this.renderer)return;const{rasterInfo:i}=this.raster,s=(0,n.p6)(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),r=s?.name,a=(0,n.p7)({...this.renderer.toJSON(),variableName:r});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(a))return;const o=this._rasterJobHandler.instance;o&&(t.rasterInfo=(0,n.p8)(i,r),t.rendererJSON=a,t.bind(),await o.updateSymbolizer(t),this._cachedRendererJson=a)}async applyRenderer(e,t){const i=e?.pixelBlock;if(!(null!=i&&i.pixels&&i.pixels.length>0))return null;let n;await this.updateRenderer();const s=this._rasterJobHandler.instance,r=this.bandIds??[];return n=s?await s.symbolize({...e,simpleStretchParams:t,bandIds:r}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:r}),n}getTileUrl(e,t,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t,i=!1){if(!this.loaded||null==t)return null;if(i&&e.equals(this.spatialReference))return this.tileInfo;const s=(0,n.b3)(e);return n.gJ.create({size:256,spatialReference:e,origin:s?{x:s.origin[0],y:s.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent?.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,s,r={}){if(i(this),r.requestAsImageElement){const i=this.getTileUrl(e,t,s);return(0,n.U)(i,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:r.signal}).then((e=>e.data))}const{serviceRasterInfo:a}=this;if(null!=a.multidimensionalInfo&&null==(r=this.normalizeRasterFetchOptions(r)).multidimensionalDefinition){const i=r.tileInfo||a.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,s,i),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer?.type&&(r={...r,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,s,r)}async fetchPixels(e,t,i,n={}){return null!=this.serviceRasterInfo.multidimensionalInfo&&null==(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition?{extent:e,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),t=Math.round(t),i=Math.round(i),this.raster.fetchPixels(e,t,i,n))}async identify(e,t={}){await this.load();const{raster:i,serviceRasterInfo:s}=this;if(null!=s?.multidimensionalInfo&&(!s.hasMultidimensionalTranspose||!((0,n.oQ)(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent))&&null==(t=this.normalizeRasterFetchOptions(t)).multidimensionalDefinition)return{location:e,value:null};const r=this.multidimensionalSubset?.areaOfInterest;if(r&&!r.contains(e))throw new n.s("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return i.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const e=this.serviceRasterInfo?.multidimensionalInfo;if(null==e||"standard-time"!==this.serviceRasterInfo?.dataType)return!1;const t=this.multidimensionalDefinition,i=t?.[0]?.variableName;return e.variables.some((e=>e.name===i&&(!t?.[0].dimensionName||e.dimensions.some((e=>"StdTime"===e.name)))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo?.multidimensionalInfo;return(0,n.p9)(this.multidimensionalSubset,t)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=(0,n.p4)(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&"Function"===this.raster.datasetFormat&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new n.pf;return this._rasterJobHandler.connectionPromise=e.initialize().then((async()=>{i(this),this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch((()=>{})),this.renderer&&this.updateRenderer()})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(null==this.interpolation){i(this);const{raster:e}=this,t=(0,n.pa)(e.rasterInfo,e.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultRenderer(e="no"){i(this);const{rasterInfo:t}=this.raster,s=(0,n.p6)(t,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),r=s?.name,a=(0,n.pb)({variableName:r,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&t.bandCount>1&&(this.bandIds=a?.bandIds??(0,n.pc)(t)),!this.renderer||"override"===e){const e=(0,n.pd)(this.raster),i=a?.renderer??(0,n.pe)(t,{bandIds:this.bandIds,variableName:r,rasterFunctionColorRamp:e}),s=t.statistics,o=s&&s.length>0?s[0]:null,l=o?.max??0,c=o?.min??0;"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===i.type&&(l>1e24||c<-1e24)&&(i.dynamicRangeAdjustment=!0,i.customStatistics=null,"none"===i.stretchType&&(i.stretchType="min-max")),this.renderer=i}const o=(0,n.p7)({...this.renderer.toJSON(),variableName:r}),l=(0,n.p8)(t,r);this.symbolizer?(this.symbolizer.rendererJSON=o,this.symbolizer.rasterInfo=l):this.symbolizer=new n.iL({rendererJSON:o,rasterInfo:l});const c=this.symbolizer.bind();if(c.success){if("auto"===e){const{colormap:e}=this.raster.rasterInfo,t=this.renderer;if(null!=e&&"raster-colormap"===t.type){const e=(0,n.pe)(this.raster.rasterInfo);JSON.stringify(e)!==JSON.stringify(t)&&this._configDefaultRenderer("override")}else if("raster-stretch"===t.type){const e=this.bandIds?.length,i=t.customStatistics?.length;!t.dynamicRangeAdjustment&&i&&e&&i!==e&&this._configDefaultRenderer("override")}}}else n.G.getLogger(this).warn("imagery-tile-mixin",c.error||"The given renderer is not supported by the layer."),"auto"===e&&this._configDefaultRenderer("override")}};function i(e){if(!e.raster||!e.serviceRasterInfo)throw new n.s("imagery-tile","no raster")}return(0,n.bt)([(0,n.bu)({clonable:!1})],t.prototype,"_cachedRendererJson",void 0),(0,n.bt)([(0,n.bu)({clonable:!1})],t.prototype,"_cachedRasterFunctionJson",void 0),(0,n.bt)([(0,n.bu)({clonable:!1})],t.prototype,"_compatibleFullExtent",void 0),(0,n.bt)([(0,n.bu)({clonable:!1})],t.prototype,"_isConstructedFromFunctionRaster",void 0),(0,n.bt)([(0,n.bu)({clonable:!1})],t.prototype,"_rasterJobHandler",void 0),(0,n.bt)([(0,n.bu)({type:[n.hO],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],t.prototype,"bandIds",void 0),(0,n.bt)([(0,n.bu)({json:{origins:{service:{read:{source:"copyrightText"}}}}})],t.prototype,"copyright",void 0),(0,n.bt)([(0,n.bu)({json:{read:!1}})],t.prototype,"fullExtent",null),(0,n.bt)([(0,n.bu)({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),(0,n.e3)(n.oY)],t.prototype,"interpolation",void 0),(0,n.bt)([(0,n.bu)()],t.prototype,"ioConfig",void 0),(0,n.bt)([(0,n.bu)({type:[n.oX],json:{write:!0}})],t.prototype,"multidimensionalDefinition",null),(0,n.bt)([(0,n.bu)({type:n.oZ,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),(0,n.bt)([(0,n.bu)()],t.prototype,"raster",void 0),(0,n.bt)([(0,n.bu)({type:n.o_,json:{name:"renderingRule",write:!0}})],t.prototype,"rasterFunction",null),(0,n.bt)([(0,n.bu)({readOnly:!0})],t.prototype,"rasterInfo",null),(0,n.bt)([(0,n.bu)()],t.prototype,"serviceRasterInfo",void 0),(0,n.bt)([(0,n.bu)()],t.prototype,"sourceJSON",void 0),(0,n.bt)([(0,n.bu)({readOnly:!0,type:n.aY,json:{read:!1}})],t.prototype,"spatialReference",void 0),(0,n.bt)([(0,n.bu)({type:n.gJ})],t.prototype,"tileInfo",void 0),(0,n.bt)([(0,n.bu)(n.ej)],t.prototype,"url",null),(0,n.bt)([(0,n.bu)()],t.prototype,"renderer",null),(0,n.bt)([(0,n.bu)({types:n.o$,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:n.p0,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],t.prototype,"internalRenderer",null),(0,n.bt)([(0,n.eg)("internalRenderer")],t.prototype,"readRenderer",null),(0,n.bt)([(0,n.bu)({clonable:!1})],t.prototype,"symbolizer",void 0),t=(0,n.bt)([(0,n.bv)("esri.layers.mixins.ImageryTileMixin")],t),t};function b(e){return["x","e","east","long","longitude"].includes(e.toLowerCase())}function w(e){return["y","n","west","lat","latitude"].includes(e.toLowerCase())}function I(e){const{axes:t}=e.domain,i=Object.keys(t),s=[],r=[];let a=-1,o=-1,l=[];for(let n=0;n<i.length;n++){const e=i[n];b(e)?a=n:w(e)&&(o=n);const c=t[e],u=[];if("values"in c){c.values.forEach((e=>u.push("string"==typeof e?new Date(e).getTime():e)));const e=u[1]-u[0];s.push([u[0]-.5*e,u[u.length-1]+.5*e]),r.push(e)}else{const{start:e,stop:t,num:i}=c,n=(t-e)/(i-1);s.push([e-.5*n,t+.5*n]),r.push(n);for(let s=0;s<i;s++)u.push(e+n*s)}l.push({name:e,values:u,extent:[u[0],u[u.length-1]]})}a>-1&&-1===o?o=0===a?1:0:o>-1&&-1===a?a=0===o?1:0:-1===o&&-1===a&&(a=0,o=1),l=l.filter(((e,t)=>!(t===a||t===o)));const{referencing:c}=e.domain,u=c.find((e=>e.coordinates.includes(i[a]))).system.id,h=u?.slice(u.lastIndexOf("/")+1),f=null==h||"CRS84"===h?4326:Number(h),d=new n.aY({wkid:f}),[p,m]=s[a],[y,g]=s[o],x=new n.bn({xmin:p,xmax:m,ymin:y,ymax:g,spatialReference:d});return{width:Math.round(x.width/r[a]),height:Math.round(x.height/r[o]),extent:x,dimensions:l}}function R(e){const t=(0,n.ph)();return t?e[t]??Object.values(e)[0]:Object.values(e)[0]}function v(){return Math.round(255*Math.random())}function S(e){const t={},{parameters:i}=e;if(!i)return t;for(const[s,r]of Object.entries(i)){const{type:e,description:i,unit:a,categoryEncoding:o,observedProperty:l}=r;if("Parameter"===e&&(t[s]={},i&&(t[s].description=R(i)),a&&(t[s].unit=a.label?R(a.label):null,t[s].symbol=a.symbol?.value),o)){const e=Object.entries(o).map(((e,t)=>({OID:t,Value:Number(e[1]),ClassName:e[0].slice(e[0].lastIndexOf("/")+1),Count:1})));let i=!1;l?.categories?.length&&(l.categories.forEach((t=>{if(!t.id)return;const s=t.id.slice(t.id.lastIndexOf("/")+1),r=e.find((e=>e.ClassName===s));if(!r)return;const a=t.label?R(t.label):null;if(r.Label=a,t.preferredColor){const e=n.h2.fromHex(t.preferredColor);e&&(i=!0,r.Red=e.r,r.Green=e.g,r.Blue=e.b)}})),i&&e.forEach((e=>{null==e.Red&&(e.Red=v(),e.Green=v(),e.Blue=v())})));const r={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:e.map((e=>({attributes:e})))};i&&r.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),t[s].attributeTable=r}}return t}function T(e){let t=Number.MAX_VALUE,i=-Number.MAX_VALUE;for(let n=0;n<e.length;n++){const s=e[n];null!=s&&(s<t&&(t=s),s>i&&(i=s))}return(0,n.pg)(t,i)}function _(e,t,i){const n=e.map(((e,i)=>({name:e,count:t[i]}))).sort(((e,t)=>e.name>t.name?-1:1)),s=(r=1,e=>r*=e.count);var r;const a=[...n.slice(1),{name:"",count:1}].reverse().map(s).reverse();let o=0;for(let l=e.length-1;l>=0;l--)o+=a[n.findIndex((({name:t})=>t===e[l]))]*(i%t[l]),i=Math.floor(i/t[l]);return o}function k(e){const{width:t,height:i,extent:s,dimensions:r}=I(e),{ranges:a}=e,o=Object.keys(a).sort(((e,t)=>e<t?-1:1)),l=[];for(let n=0;n<o.length;n++){const e=o[n];r?.length&&l.push({name:e,dimensions:r})}const c=S(e);l.forEach((e=>c[e.name]&&Object.assign(e,c[e.name])));const u=l.length?{variables:l}:void 0,h=[];for(let d=0;d<o.length;d++){const e=o[d],{values:s,dataType:l,axisNames:c,shape:u}=a[e],f=u.length>2?d*u.slice(0,-2).reduce(((e,t)=>e*t)):0,p=c.slice(0,-2),m=u.slice(0,-2),y="float"===l?"f32":T(s),g=t*i,x=s.length/g;for(let a=0;a<x;a++){const e=n.iH.createEmptyBand(y,g),o=new Uint8Array(g).fill(255);let l=!1;const c=a*g;for(let t=0;t<g;t++){const i=s[c+t];null==i?(o[t]=0,l=!0):e[t]=i}if(0===d||r?.length){const s=new n.iH({width:t,height:i,mask:l?o:null,pixels:[e],pixelType:y});s.updateStatistics(),r?.length?h[_(p,m,a)+f]=s:h.push(s)}else{const t=h[a];t.pixels.push(e),l?t.mask&&(t.mask=n.iH.combineBandMasks([t.mask,o])):t.mask=l?o:null}}}const f=Object.values(c).find((e=>e.attributeTable))?.attributeTable;return{extent:s,pixelBlocks:h,multidimensionalInfo:u,attributeTable:f,bandNames:u?void 0:o}}let F=class extends f{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(e,t,i,s={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[a,o]=r.storageInfo.tileInfo.size,{sliceId:l}=s,{pixelBlocks:c}=this.source,u={pixelBlock:null==l?c[0]:c[l],useBilinear:"thematic"!==r.dataType,tileSize:{width:a,height:o},level:e,row:t,col:i},h=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,s):(0,n.iO)(u);return Promise.resolve(h)}const r=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(r)}async _open(e){const t=this.source,{pixelBlocks:i,attributeTable:s,statistics:r,histograms:a,name:o,nativeExtent:l,transform:c}=t,u=i[0],{width:h,height:f,pixelType:d}=u,p=t.extent??new n.bn({xmin:-.5,ymin:.5,xmax:h-.5,ymax:f-.5,spatialReference:new n.aY({wkid:3857})}),m=t.isPseudoSpatialReference??!t.extent,y={x:p.width/h,y:p.height/f},g={...t.keyProperties};s&&(g.DataType="Thematic");const x=new n.pi({width:h,height:f,pixelType:d,extent:p,nativeExtent:l,attributeTable:s,transform:c,pixelSize:y,spatialReference:p.spatialReference,bandCount:u.pixels.length,keyProperties:g,multidimensionalInfo:t.multidimensionalInfo,statistics:r,isPseudoSpatialReference:m,histograms:a});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(x),this.createRemoteDatasetStorageInfo(x,512,512),this._set("rasterInfo",x),this.updateTileInfo(),x.multidimensionalInfo?await this._buildMDimStats(t.pixelBlocks,x.multidimensionalInfo):await this._buildInMemoryRaster(u,{width:512,height:512},e),x.multidimensionalInfo||(this.source=null),this.datasetName=o}async _buildInMemoryRaster(e,t,i){const{rasterInfo:s}=this,r=s.storageInfo.maximumPyramidLevel??0,a="thematic"!==s.dataType,o=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:r,useBilinear:a},i):Promise.resolve((0,n.iN)(e,t,r,a)),l=null!=s.statistics,c=null!=s.histograms,u=this.ioConfig.skipStatistics||l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve((0,n.iM)(e)),h=await(0,n.e6)([o,u]);if(!h[0].value&&h[1].value)throw new n.s("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=h[0].value,l||(s.statistics=h[1].value?.statistics),c||(s.histograms=h[1].value?.histograms)}async _buildMDimStats(e,t,i){for(let s=0;s<t.variables.length;s++){const r=t.variables[s];if(r.statistics)continue;const a=r.dimensions.map((e=>new n.oX({variableName:r.name,dimensionName:e.name,values:[e.values?.[0]??e.extent?.[0]],isSlice:!0}))),o=(0,n.oR)(a,t),l=null==o?null:e[o];if(null==l)continue;const c=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:l},i):(0,n.iJ)(l);r.statistics=c.statistics,r.histograms||(r.histograms=c.histograms)}}};(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],F.prototype,"datasetFormat",void 0),(0,n.bt)([(0,n.bu)()],F.prototype,"source",void 0),(0,n.bt)([(0,n.bu)()],F.prototype,"url",null),F=(0,n.bt)([(0,n.bv)("esri.layers.support.rasterDatasets.InMemoryRaster")],F);const C=F;let M=class extends f{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,t,i,n={}){return this._inMemoryRaster.fetchRawTile(e,t,i,n)}async _open(e){const{extent:t,pixelBlocks:i,multidimensionalInfo:s,attributeTable:r,bandNames:a}=await this._fetchData(e),{statistics:o,histograms:l}=(0,n.iJ)(i[0]),c=a?.map((e=>({BandName:e}))),u={DataType:r?"Thematic":s?"Scientific":"Generic",BandProperties:c},h=new C({source:{extent:t,pixelBlocks:i,attributeTable:r?n.bx.fromJSON(r):null,multidimensionalInfo:s,statistics:o,histograms:l,keyProperties:u,isPseudoSpatialReference:!1}});await h.open(),this._inMemoryRaster=h;const f=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",f.slice(0,f.indexOf("."))),this._set("rasterInfo",h.rasterInfo)}async _fetchData(e){const t=this.source??(await this.request(this.url,{signal:e?.signal})).data,i="imagery-tile-layer:open-coverage-json";if("coverage"!==t.type?.toLowerCase()||"grid"!==t.domain?.domainType?.toLowerCase())throw new n.s(i,"Only coverage with Grid domain type is supported");if(!t.ranges)throw new n.s(i,"Missing ranges in the grid coverage data");if(!t.domain.referencing?.length)throw new n.s(i,"Missing domain referencing in the grid coverage data");const s=Object.values(t.ranges);for(let r=0;r<s.length;r++){const{axisNames:e,shape:t,type:a,values:o}=s[r];if(!("ndarray"===a.toLowerCase()&&o?.length&&e?.length&&t?.length))throw new n.s(i,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!b(e[e.length-1])||!w(e[e.length-2]))throw new n.s(i,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return k(t)}};(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],M.prototype,"datasetFormat",void 0),(0,n.bt)([(0,n.bu)({constructOnly:!0})],M.prototype,"source",void 0),M=(0,n.bt)([(0,n.bv)("esri.layers.support.rasterDatasets.CovJSONRaster")],M);const O=M;function P(e,t){if(!e||!t)return[];let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=[];if(t){const s=P(e,i);for(let e=0;e<s.length;e++)P(s[e],t).forEach((e=>n.push(e)));return n}const s=e.getElementsByTagNameNS("*",i);if(!s||0===s.length)return[];for(let r=0;r<s.length;r++)n.push(s[r]||s.item(r));return n}function D(e,t){if(!e||!t)return null;let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=P(e,i);return n.length>0?t?D(n[0],t):n[0]:null}function B(e,t=null){const i=t?D(e,t):e;let n;return i?(n=i.textContent||i.nodeValue,n?n.trim():null):null}function N(e,t){const i=P(e,t),n=[];let s;for(let r=0;r<i.length;r++)s=i[r].textContent||i[r].nodeValue,s&&(s=s.trim(),""!==s&&n.push(s));return n}function J(e,t){return N(e,t).map((e=>Number(e)))}function E(e,t){const i=B(e,t);return Number(i)}function A(e,t){const i=e?.nodeName?.toLowerCase(),n=t.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===n}function H(e,t){if(!e||!t)return null;const i=[];for(let n=0;n<e.length;n++)i.push(e[n]),i.push(t[n]);return i}function L(e){const t=D(e,"GeodataXform"),i=W(E(t,"SpatialReference/WKID")||B(t,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t.getAttribute("xsi:type"))return{spatialReference:i,transform:null};const n=E(t,"PolynomialOrder")??1,s=J(t,"CoeffX/Double"),r=J(t,"CoeffY/Double"),o=J(t,"InverseCoeffX/Double"),l=J(t,"InverseCoeffY/Double"),c=H(s,r),u=H(o,l);return{spatialReference:i,transform:c&&u&&c.length&&u.length?new a.y({spatialReference:i,polynomialOrder:n,forwardCoefficients:c,inverseCoefficients:u}):null}}function z(e){const t=E(e,"NoDataValue"),i=D(e,"Histograms/HistItem"),n=E(i,"HistMin"),s=E(i,"HistMax"),r=E(i,"BucketCount"),a=B(i,"HistCounts")?.split("|").map((e=>Number(e)));let o,l,c,u;P(e,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=t;break;case"STATISTICS_MAXIMUM":l=t;break;case"STATISTICS_MEAN":c=t;break;case"STATISTICS_STDDEV":u=t}}));const h=E(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&null!=n&&null!=s?{min:n,max:s,size:r||a.length,counts:a}:null,sourceBandIndex:h,statistics:null!=o&&null!=l?{min:o,max:l,avg:c,stddev:u}:null}}function W(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new n.aY({wkid:t});if(e=String(e).trim(),(0,n.pj)(e))return new n.aY({wkt2:e});const i=e.toUpperCase();if(i.startsWith("COMPD_CS")){if(!i.includes("VERTCS")||!i.includes("GEOGCS")&&!i.startsWith("PROJCS"))return null;const s=i.indexOf("VERTCS"),r=i.indexOf("PROJCS"),a=r>-1?r:i.indexOf("GEOGCS");if(-1===a)return null;const o=e.slice(a,e.lastIndexOf("]",s)+1).trim(),l=e.slice(s,e.lastIndexOf("]")).trim();t=G(o);const c=new n.aY(t?{wkid:t}:{wkt:o}),u=G(l);return u&&(c.vcsWkid=u),c}return i.startsWith("GEOGCS")||i.startsWith("PROJCS")?(t=G(e),new n.aY(0!==t?{wkid:t}:{wkt:e})):null}function G(e){const t=e.replaceAll("]","[").replaceAll('"',"").split("[").map((e=>e.trim())).filter((e=>""!==e)),i=t[t.length-1].split(","),n=i[0]?.toLowerCase();if(("epsg"===n||"esri"===n)&&e.endsWith('"]]')){const e=Number(i[1]);if(!isNaN(e)&&0!==e)return e}return 0}function j(e){if("pamdataset"!==e?.documentElement.tagName?.toLowerCase())return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(A(e,"SRS")){if(!t.spatialReference){const i=B(e);t.spatialReference=W(i)}}else if(A(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:i,transform:n}=L(e);t.transform=n,t.spatialReference||(t.spatialReference=i)}else P(e,"MDI").forEach((e=>t.metadata[e.getAttribute("key")]=B(e)));else if(A(e,"PAMRasterBand")){const i=z(e);null!=i.sourceBandIndex&&null==t.rasterBands[i.sourceBandIndex]?t.rasterBands[i.sourceBandIndex]=i:t.rasterBands.push(i)}}));const i=t.rasterBands;if(i.length){const e=!!i[0].statistics;t.statistics=e?i.map((e=>e.statistics)).filter(n.ci):null;const s=!!i[0].histogram;t.histograms=s?i.map((e=>e.histogram)).filter(n.ci):null}return t}let q=class extends f{fetchRawTile(e,t,i,n={}){return this._inMemoryRaster.fetchRawTile(e,t,i,n)}async _open(e){const t=await this._fetchData(e);let{spatialReference:i,statistics:s,histograms:r,transform:a}=await this._fetchAuxiliaryData(e);const o=!i;o&&(i=new n.aY({wkid:3857})),r?.length&&null==s&&(s=(0,n.pk)(r));const{width:l,height:c}=t;let u=new n.bn({xmin:-.5,ymin:.5-c,xmax:l-.5,ymax:.5,spatialReference:i});const h=a?a.forwardTransform(u):u;let f=!0;if(a){const e=a.forwardCoefficients;f=e&&0===e[1]&&0===e[2],f&&(a=null,u=h)}const d=new C({source:{extent:h,nativeExtent:u,transform:a,pixelBlocks:[t],statistics:s,histograms:r,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:o},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(d.ioConfig.skipMapInfo=!0),await d.open(),d.source=null,this._set("rasterInfo",d.rasterInfo),this._inMemoryRaster=d}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),i=(0,n.pl)(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new n.s("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const s=i.toLowerCase(),r="gif"===s||"bmp"===s||!(0,n.Q)("ios"),a=await this.decodePixelBlock(t,{format:s,useCanvas:r,hasNoZlibMask:!0});if(null==a)throw new n.s("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(e){const t=e?.signal,{skipExtensions:i=[],skipMapInfo:s}=this.ioConfig,r=s||i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),o=this.datasetFormat,l="JPG"===o?"jgw":"PNG"===o?"pgw":"BMP"===o?"bpw":null,c=l&&i.includes(l)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+l,{responseType:"text",signal:t}),u=await(0,n.e6)([r,c]);if(t?.aborted)throw(0,n.pm)();const h=j(u[0].value?.data);if(!h.transform){const e=u[1].value?u[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;h.transform=6===e?.length?new a.y({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return h}};(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],q.prototype,"datasetFormat",void 0),q=(0,n.bt)([(0,n.bv)("esri.layers.support.rasterDatasets.ImageAuxRaster")],q);const V=q;let U=class extends f{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(e,t,i,s={}){const{storageInfo:r,extent:a}=this.rasterInfo,{transposeInfo:o}=r,l=null!=o&&!!s.transposedVariableName;if(this._slices&&!l&&null==s.sliceId)return null;const c=l?0:r.maximumPyramidLevel-e+this._levelOffset,u=`${this.url}/tile/${c}/${t}/${i}`,h=this._slices?l?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:f}=await this.request(u,{query:h,responseType:"array-buffer",signal:s.signal});if(!f)return null;const d=l?o.tileSize:r.tileInfo.size,p=await this.decodePixelBlock(f,{width:d[0],height:d[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:l,noDataValue:this.rasterInfo.noDataValue});if(null==p)return null;const m=r.blockBoundary[e];if("jpg"!==r.compression||i>m.minCol&&i<m.maxCol&&t>m.minRow&&t<m.maxRow)return p;const{origin:y,blockWidth:g,blockHeight:x}=r,{x:b,y:w}=this.getPyramidPixelSize(e),I=Math.round((a.xmin-y.x)/b)%g,R=Math.round((a.xmax-y.x)/b)%g||g,v=Math.round((y.y-a.ymax)/w)%x,S=Math.round((y.y-a.ymin)/w)%x||x,T=i===m.minCol?I:0,_=t===m.minRow?v:0,k=i===m.maxCol?R:g,F=t===m.maxRow?S:x;return(0,n.pn)(p,{x:T,y:_},{width:k-T,height:F-_}),p}getSliceIndex(e){if(!this._slices||null==e||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!i||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),n=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),s=await Promise.all([i,n]);return s[0]&&s[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),s[1]?.[0]?.counts?.length||(s[1]=null),{statistics:s[0]||null,histograms:s[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,t.datumTransformation);if(null===i)return null;let n=0;const{maximumPyramidLevel:s}=this.rasterInfo.storageInfo;let r=s-n+this._levelOffset;const a=i.srcLocation;for(;r>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(r,i.row,i.col,t))break}catch{}if(r--,n++,i=this.identifyPixelLocation(a,n,t.datumTransformation),null===i)return null}return-1===r||null==i?null:n}async _open(e){const t=e?.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=i.data;if(this.sourceJSON=s,!s)throw new n.s("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new n.s("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const r=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=s.cacheType,null==this.tileType&&(r.includes(s.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===s.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=s.name?.slice(s.name.indexOf("/")+1)??"";const a=await this._fetchRasterInfo({signal:t});if(null==a)throw new n.s("image-server-raster:open","cannot initialize image service");(0,n.po)(a,s);const o="Map"===this.tileType?$(s.tileInfo,s):n.gJ.fromJSON(s.tileInfo);(0,n.jS)(o);const[l,c]=this._computeMinMaxLOD(a,o),{extent:u,pixelSize:h}=a,f=.5/a.width*h.x,d=Math.max(h.x,h.y),{lods:p}=o;("Map"!==this.tileType&&0!==s.maxScale||Math.abs(h.x-h.y)>f||!p.some((e=>Math.abs(e.resolution-d)<f)))&&(h.x=h.y=l.resolution,a.width=Math.ceil((u.xmax-u.xmin)/h.x-.1),a.height=Math.ceil((u.ymax-u.ymin)/h.y-.1));const m=l.level-c.level,[y,g]=o.size,x=[],b=[];p.forEach(((e,t)=>{e.level>=c.level&&e.level<=l.level&&x.push({x:e.resolution,y:e.resolution}),t<p.length-1&&b.push(Math.round(10*e.resolution/p[t+1].resolution)/10)})),x.sort(((e,t)=>e.x-t.x));const w=this.computeBlockBoundary(u,y,g,o.origin,x,m),I=x.length>1?x.slice(1):null;let R;s.transposeInfo&&(R={tileSize:[s.transposeInfo.rows,s.transposeInfo.cols],packetSize:a.keyProperties?._yxs.PacketSize??0});const v=b.length<=1||b.length>=3&&b.slice(0,-1).every((e=>e===b[0]))?b[0]??2:Math.round(10/(c.resolution/l.resolution)**(-1/m))/10;if(a.storageInfo=new n.oS({blockWidth:o.size[0],blockHeight:o.size[1],pyramidBlockWidth:o.size[0],pyramidBlockHeight:o.size[1],pyramidResolutions:I,pyramidScalingFactor:v,compression:o.format,origin:o.origin,firstPyramidLevel:1,maximumPyramidLevel:m,tileInfo:o,transposeInfo:R,blockBoundary:w}),Y(a),this._set("rasterInfo",a),s.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:a.storageInfo.tileInfo,parsedUrl:(0,n.I)(this.url),url:this.url,tileServers:[]};this._tilemapCache=new n.nQ({layer:e})}}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=t.fullExtent||t.extent,i=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),s=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),r=n.aY.fromJSON(t.spatialReference||e.spatialReference),a=new n.D({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:r});return new n.pi({width:i,height:s,bandCount:3,extent:n.bn.fromJSON(e),spatialReference:r,pixelSize:a,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,s=(0,n.pp)(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),r=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data?.slices)).catch((()=>null)):null,a=await Promise.all([s,r]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_computeMinMaxLOD(e,t){const{pixelSize:i}=e,n=.5/e.width*i.x,{lods:s}=t,r=t.lodAt(Math.max.apply(null,s.map((e=>e.level)))),a=t.lodAt(Math.min.apply(null,s.map((e=>e.level)))),{tileType:o}=this;if("Map"===o)return this._levelOffset=s[0].level,[r,a];if("Raster"===o)return[s.find((e=>e.resolution===i.x))??r,a];const{minScale:l,maxScale:c}=this.sourceJSON;let u=r;c>0&&(u=s.find((e=>Math.abs(e.scale-c)<n)),u||(u=s.filter((e=>e.scale>c)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??r));let h=a;return l>0&&(h=s.find((e=>Math.abs(e.scale-l)<n))??a,this._levelOffset=h.level-a.level),[u,h]}};function $(e,t){if(!e)return null;const{minScale:i,maxScale:s,minLOD:r,maxLOD:a}=t;if(null!=r&&null!=a)return n.gJ.fromJSON({...e,lods:e.lods.filter((({level:e})=>null!=e&&e>=r&&e<=a))});if(0!==i&&0!==s){const t=e=>Math.round(1e4*e)/1e4,r=i?t(i):1/0,a=s?t(s):-1/0;return n.gJ.fromJSON({...e,lods:e.lods.filter((e=>{const i=t(e.scale);return i<=r&&i>=a}))})}return n.gJ.fromJSON(e)}function Y(e){const{extent:t,spatialReference:i}=e;t.xmin>-1&&t.xmax>181&&i?.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new a.c,e.extent=e.transform.forwardTransform(t))}(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],U.prototype,"datasetFormat",void 0),(0,n.bt)([(0,n.bu)()],U.prototype,"tileType",void 0),U=(0,n.bt)([(0,n.bv)("esri.layers.support.rasterDatasets.ImageServerRaster")],U);const X=U,K=new Map;K.set("Int8","s8"),K.set("UInt8","u8"),K.set("Int16","s16"),K.set("UInt16","u16"),K.set("Int32","s32"),K.set("UInt32","u32"),K.set("Float32","f32"),K.set("Float64","f32"),K.set("Double64","f32");const Q=new Map;Q.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Q.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Q.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Q.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let Z=class extends f{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(e,t,i,s={}){const{blockWidth:r,blockHeight:a,blockBoundary:o}=this.rasterInfo.storageInfo,l=o[e];if(!l||l.maxRow<t||l.maxCol<i||l.minRow>t||l.minCol>i)return null;const{bandCount:c,pixelType:u}=this.rasterInfo,{ranges:h,actualTileWidth:f,actualTileHeight:d}=this._getTileLocation(e,t,i);if(!h||0===h.length)return null;if(0===h[0].from&&0===h[0].to){const e=new Uint8Array(r*a);return new n.iH({width:r,height:a,pixels:void 0,mask:e,validPixelCount:0})}const{bandIds:p}=this.ioConfig,m=this._getBandSegmentCount(),y=[];let g=0;for(g=0;g<m;g++)p&&!p.includes(g)||y.push(this.request(this._files.data,{range:{from:h[g].from,to:h[g].to},responseType:"array-buffer",signal:s.signal}));const x=await Promise.all(y),b=x.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),w=new Uint8Array(b),I=[];let R=0;for(g=0;g<m;g++)I.push(R),w.set(new Uint8Array(x[g].data),R),R+=x[g].data.byteLength;const v=Q.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(w.buffer,{width:r,height:a,format:v,planes:p?.length||c,offsets:I,pixelType:u});if(null==S)return null;let{noDataValue:T}=this.rasterInfo;if(null!=T&&"lerc"!==v&&!S.mask&&(T=T[0],null!=T)){const e=S.width*S.height,t=new Uint8Array(e);if(Math.abs(T)>1e24)for(g=0;g<e;g++)Math.abs((S.pixels[0][g]-T)/T)>1e-6&&(t[g]=1);else for(g=0;g<e;g++)S.pixels[0][g]!==T&&(t[g]=1);S.mask=t}let _=0,k=0;if(f!==r||d!==a){let e=S.mask;if(e)for(g=0;g<a;g++)if(k=g*r,g<d)for(_=f;_<r;_++)e[k+_]=0;else for(_=0;_<r;_++)e[k+_]=0;else for(e=new Uint8Array(r*a),S.mask=e,g=0;g<d;g++)for(k=g*r,_=0;_<f;_++)e[k+_]=1}return S}async _open(e){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?e.signal:null,i=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:s,files:r}=this._parseHeader(i.data),{skipMapInfo:a,skipExtensions:o=[]}=this.ioConfig;if(!o.includes("aux.xml")&&!a){const t=await this._fetchAuxiliaryData(e);null!=t&&(s.statistics=t.statistics??s.statistics,s.histograms=t.histograms,t.histograms&&null==s.statistics&&(s.statistics=(0,n.pk)(t.histograms)))}a&&this.updateImageSpaceRasterInfo(s),this._set("rasterInfo",s),this._files=r;const l=await this.request(r.index,{responseType:"array-buffer",signal:t});this._storageIndex=ee(l.data);const{blockWidth:c,blockHeight:u}=this.rasterInfo.storageInfo,h=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:d}=this.rasterInfo,p=[],m=this._getBandSegmentCount();let y=0,g=-1;for(;y<this._storageIndex.length;){g++;const e=Math.ceil(f/c/h**g)-1,t=Math.ceil(d/u/h**g)-1;y+=(e+1)*(t+1)*m*4,p.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=p,g>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=g),this.updateTileInfo()}_getBandSegmentCount(){return Q.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:n,blockHeight:s,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,u,h,f=0,d=0;for(h=0;h<e;h++)d=r**h,c=Math.ceil(a/n/d),u=Math.ceil(o/s/d),f+=c*u;d=r**e,c=Math.ceil(a/n/d),u=Math.ceil(o/s/d),f+=t*c+i,f*=4*l;const p=this._storageIndex.subarray(f,f+4*l);let m=0,y=0;const g=[];for(let x=0;x<l;x++)m=p[4*x]*2**32+p[4*x+1],y=m+p[4*x+2]*2**32+p[4*x+3],g.push({from:m,to:y});return{ranges:g,actualTileWidth:i<c-1?n:Math.ceil(a/d)-n*(c-1),actualTileHeight:t<u-1?s:Math.ceil(o/d)-s*(u-1)}}_parseHeader(e){const t=D(e,"MRF_META/Raster");if(!t)throw new n.s("mrf:open","not a valid MRF format");const i=D(t,"Size"),s=parseInt(i.getAttribute("x"),10),r=parseInt(i.getAttribute("y"),10),a=parseInt(i.getAttribute("c"),10),o=(B(t,"Compression")||"none").toLowerCase();if(!Q.has(o))throw new n.s("mrf:open","currently does not support compression "+o);const l=B(t,"DataType")||"UInt8",c=K.get(l);if(null==c)throw new n.s("mrf:open","currently does not support pixel type "+l);const u=D(t,"PageSize"),h=parseInt(u.getAttribute("x"),10),f=parseInt(u.getAttribute("y"),10),d=D(t,"DataValues");let p,m;if(d&&(m=d.getAttribute("NoData"),null!=m&&(p=m.trim().split(" ").map((e=>parseFloat(e))))),D(e,"MRF_META/CachedSource"))throw new n.s("mrf:open","currently does not support MRF referencing other data files");const y=D(e,"MRF_META/GeoTags"),g=D(y,"BoundingBox");let x,b=!1;if(null!=g){const e=parseFloat(g.getAttribute("minx")),t=parseFloat(g.getAttribute("miny")),i=parseFloat(g.getAttribute("maxx")),s=parseFloat(g.getAttribute("maxy")),r=B(y,"Projection")||"";let a=n.aY.WGS84;if("LOCAL_CS[]"!==r)if(r.toLowerCase().startsWith("epsg:")){const e=Number(r.slice(5));isNaN(e)||0===e||(a=new n.aY({wkid:e}))}else a=W(r)??n.aY.WGS84;else b=!0,a=new n.aY({wkid:3857});x=new n.bn(e,t,i,s),x.spatialReference=a}else b=!0,x=new n.bn({xmin:-.5,ymin:.5-r,xmax:s-.5,ymax:.5,spatialReference:new n.aY({wkid:3857})});const w=D(e,"MRF_META/Rsets"),I=parseInt(w?.getAttribute("scale")||"2",10),R=x.spatialReference,v=new n.oS({origin:new n.D({x:x.xmin,y:x.ymax,spatialReference:R}),blockWidth:h,blockHeight:f,pyramidBlockWidth:h,pyramidBlockHeight:f,compression:o,pyramidScalingFactor:I}),S=new n.D({x:x.width/s,y:x.height/r,spatialReference:R}),T=new n.pi({width:s,height:r,extent:x,isPseudoSpatialReference:b,spatialReference:R,bandCount:a,pixelType:c,pixelSize:S,noDataValue:p,storageInfo:v}),_=B(e,"datafile"),k=B(e,"IndexFile");return{rasterInfo:T,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:_||this.url.replace(".mrf",Q.get(o).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return j(t)}catch{return null}}};function ee(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let t,i,s,r,a,o;if(n.pq){for(i=new Uint8Array(e),r=new ArrayBuffer(e.byteLength),s=new Uint8Array(r),a=0;a<e.byteLength/4;a++)for(o=0;o<4;o++)s[4*a+o]=i[4*a+3-o];t=new Uint32Array(r)}else t=new Uint32Array(e);return t}(0,n.bt)([(0,n.bu)()],Z.prototype,"_files",void 0),(0,n.bt)([(0,n.bu)()],Z.prototype,"_storageIndex",void 0),(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],Z.prototype,"datasetFormat",void 0),Z=(0,n.bt)([(0,n.bv)("esri.layers.support.rasterDatasets.MRFRaster")],Z);const te=Z;function ie(e){const t=e.fields,i=e.records,n=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",s=[{name:n,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),r=s.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[n]=o++,l=1;l<r.length;l++)t[r[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:s,features:a}}class ne{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const s=t.getUint32(4,!0),r=t.getUint16(8,!0),a=t.getUint16(10,!0),o={version:i,recordCount:s,headerByteCount:r,recordByteCount:a};let l=32;const c=[],u=[];let h;if(3===i){for(;13!==t.getUint8(l);)h=String.fromCharCode(t.getUint8(l+11)).trim(),c.push({name:(0,n.pr)(new Uint8Array(e,l,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:t.getUint8(l+16)}),l+=32;if(l+=1,c.length>0)for(;u.length<s&&e.byteLength-l>a;){const i=[];32===t.getUint8(l)?(l+=1,c.forEach((t=>{if("C"===t.type)i.push((0,n.pr)(new Uint8Array(e,l,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,l,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,l,t.length)).trim()));else if("D"===t.type){const n=String.fromCharCode.apply(null,new Uint8Array(e,l,t.length)).trim();i.push(new Date(parseInt(n.slice(0,4),10),parseInt(n.slice(4,6),10)-1,parseInt(n.slice(6,8),10)))}l+=t.length})),u.push(i)):l+=a}}return{header:o,fields:c,records:u,recordSet:ie({fields:c,records:u})}}}const se=(e,t)=>e.get(t)?.values,re=(e,t)=>e.get(t)?.values?.[0];let ae=class extends f{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(e,t,i,n={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,i))return null;const s=await this._fetchRawTiffTile(e,t,i,!1,n);if(null!=s&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(e,t,i,!0,n);null!=r&&r.pixels[0]instanceof Uint8Array&&(s.mask=r.pixels[0])}return s}async _open(e){const t=e?e.signal:null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!i)throw new n.s("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:s,firstIFDPos:r,isBigTiff:a}=(0,n.ps)(i),o=[];await this._readIFDs(o,i,s,r,0,a?8:4,t);const{imageInfo:l,rasterInfo:c}=oe(o),u=(0,n.pt)(o),h=(0,n.pu)(o);if(this._headerInfo={littleEndian:s,isBigTiff:a,ifds:o,pyramidIFDs:u,maskIFDs:h,...l},this._set("rasterInfo",c),!l.isSupported)throw new n.s("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new n.s("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");c.isPseudoSpatialReference&&n.G.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const f=o[0].get("PREDICTOR")?.values?.[0];if(3===o[0].get("SAMPLEFORMAT")?.values?.[0]&&2===f)throw new n.s("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:d,skipExtensions:p=[]}=this.ioConfig;if(!p.includes("aux.xml")&&!d){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&le(t,c)}p.includes("vat.dbf")||1!==c.bandCount||"u8"!==c.pixelType||d||(c.attributeTable=await this._fetchAuxiliaryTable(e),null!=c.attributeTable&&(c.keyProperties.DataType="thematic")),d&&this.updateImageSpaceRasterInfo(c),this.updateTileInfo()}async _readIFDs(e,t,i,s,r,a=4,o){if(!s)return null;(s>=t.byteLength||s<0)&&(t=(await this.request(this.url,{range:{from:s+r,to:s+r+this._bufferSize},responseType:"array-buffer",signal:o})).data,r=s+r,s=0);const l=await this._readIFD(t,i,s,r,n.pv.tiffTags,a,o);if(e.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(e,t,i,l.nextIFD-r,r,a,o)}async _readIFD(e,t,i,s,r=n.pv.tiffTags,a=4,o){if(!e)return null;const l=(0,n.pw)(e,t,i,s,r,a);if(l.success){const i=[];if(l.ifd?.forEach((e=>{e.values||i.push(e)})),i.length>0){const r=i.map((e=>e.offlineOffsetSize)).filter(n.ci),a=Math.min.apply(null,r.map((e=>e[0])));if(Math.min.apply(null,r.map((e=>e[0]+e[1])))-a<=this._bufferSize){const{data:r}=await this.request(this.url,{range:{from:a,to:a+this._bufferSize},responseType:"array-buffer",signal:o});e=r,s=a,i.forEach((i=>(0,n.px)(e,t,i,s)))}}if(l.ifd?.has("GEOKEYDIRECTORY")){const i=l.ifd.get("GEOKEYDIRECTORY"),r=i?.values;if(r&&r.length>4){const a=r[0]+"."+r[1]+"."+r[2],l=await this._readIFD(e,t,i.valueOffset+6-s,s,n.pv.geoKeys,2,o);i.data=l.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]})}}return l}return l.requiredBufferSize&&l.requiredBufferSize!==e.byteLength?(e=(await this.request(this.url,{range:{from:s,to:s+l.requiredBufferSize+4},responseType:"array-buffer",signal:o})).data).byteLength<l.requiredBufferSize?null:this._readIFD(e,t,0,s,n.pv.tiffTags,4,o):void 0}async _fetchRawTiffTile(e,t,i,n,s={}){const r=this._getTileLocation(e,t,i,n);if(!r)return null;const{ranges:a,actualTileWidth:o,actualTileHeight:l,ifd:c}=r,u=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:s.signal}))),h=await Promise.all(u),f=h.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),d=1===h.length?h[0].data:new ArrayBuffer(f),p=[0],m=[0];if(h.length>1){const e=new Uint8Array(d);for(let t=0,i=0;t<h.length;t++){const n=h[t].data;e.set(new Uint8Array(n),i),p[t]=i,i+=n.byteLength,m[t]=n.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:p,sizes:m},width:y,height:g,planes:null,pixelType:null});if(null==x)return null;let b,w,I;if(o!==y||l!==g){let e=x.mask;if(e)for(b=0;b<g;b++)if(I=b*y,b<l)for(w=o;w<y;w++)e[I+w]=0;else for(w=0;w<y;w++)e[I+w]=0;else for(e=new Uint8Array(y*g),x.mask=e,b=0;b<l;b++)for(I=b*y,w=0;w<o;w++)e[I+w]=1}return x}_getTileLocation(e,t,i,s=!1){const{firstPyramidLevel:r,blockBoundary:a}=this.rasterInfo.storageInfo,o=0===e?0:e-(r-1),{_headerInfo:l}=this;if(!l)return null;const c=s?l.maskIFDs[o]:0===o?l?.ifds[0]:l?.pyramidIFDs[o-1];if(!c)return null;const u=(0,n.py)(c,l),h=se(c,"TILEOFFSETS");if(void 0===h)return null;const f=se(c,"TILEBYTECOUNTS"),{minRow:d,minCol:p,maxRow:m,maxCol:y}=a[o];if(t>m||i>y||t<d||i<p)return null;const g=re(c,"IMAGEWIDTH"),x=re(c,"IMAGELENGTH"),b=re(c,"TILEWIDTH"),w=re(c,"TILELENGTH"),I=[];if(u){const{bandCount:e}=this.rasterInfo;for(let n=0;n<e;n++){const e=n*(m+1)*(y+1)+t*(y+1)+i;I[n]={from:h[e],to:h[e]+f[e]-1}}}else{const e=t*(y+1)+i;I.push({from:h[e],to:h[e]+f[e]-1})}for(let n=0;n<I.length;n++)if(null==I[n].from||!I[n].to||I[n].to<0)return null;return{ranges:I,ifd:c,actualTileWidth:i===y&&g%b||b,actualTileHeight:t===m&&x%w||w}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return j(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),i=ne.parse(t);return i?.recordSet?n.bx.fromJSON(i.recordSet):null}catch{return null}}};function oe(e){const t=(0,n.pz)(e),{width:i,height:s,tileWidth:r,tileHeight:o,planes:l,pixelType:c,compression:u,firstPyramidLevel:h,maximumPyramidLevel:f,pyramidBlockWidth:d,pyramidBlockHeight:p,pyramidResolutions:m,tileBoundary:y,affine:g,metadata:x}=t,b=t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid;let w=W(b),I=!!t.isPseudoGeographic;null==w&&(I=!0,w=new n.aY({wkid:3857}));const R=new n.bn({...t.extent,spatialReference:w}),v=new n.D(R?{x:R.xmin,y:R.ymax,spatialReference:w}:{x:0,y:0}),S=new n.oS({blockWidth:r,blockHeight:o,pyramidBlockWidth:d,pyramidBlockHeight:p,compression:u,origin:v,firstPyramidLevel:h,maximumPyramidLevel:f,pyramidResolutions:m,blockBoundary:y}),T=new n.D({x:(R.xmax-R.xmin)/i,y:(R.ymax-R.ymin)/s,spatialReference:w}),_=x?{BandProperties:x.bandProperties,DataType:x.dataType}:{};let k=null;const F=re(e[0],"PHOTOMETRICINTERPRETATION"),C=se(e[0],"COLORMAP");if(F<=3&&C?.length>3&&C.length%3==0){k=[];const e=C.length/3;for(let t=0;t<e;t++)k.push([t,C[t]>>>8,C[t+e]>>>8,C[t+2*e]>>>8])}const M=new n.pi({width:i,height:s,bandCount:l,pixelType:c,pixelSize:T,storageInfo:S,spatialReference:w,isPseudoSpatialReference:I,keyProperties:_,extent:R,colormap:k,statistics:x?x.statistics:null});if(g?.length&&(M.nativeExtent=new n.bn({xmin:-.5,ymin:.5-s,xmax:i-.5,ymax:.5,spatialReference:w}),M.transform=new a.y({polynomialOrder:1,forwardCoefficients:[g[2]+g[0]/2,g[5]-g[3]/2,g[0],g[3],-g[1],-g[4]]}),M.extent=M.transform.forwardTransform(M.nativeExtent),M.pixelSize=new n.D({x:(R.xmax-R.xmin)/i,y:(R.ymax-R.ymin)/s,spatialReference:w}),S.origin.x=-.5,S.origin.y=.5),m){const{x:e,y:t}=M.pixelSize;m.forEach((i=>{i.x*=e,i.y*=t}))}return{imageInfo:t,rasterInfo:M}}function le(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&null==t.statistics&&(t.statistics=(0,n.pk)(e.histograms)),e.transform&&null==t.transform){t.transform=e.transform,t.nativeExtent=t.extent;const i=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new n.D({x:(i.xmax-i.xmin)/t.width,y:(i.ymax-i.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=i}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference,t.extent.spatialReference=t.nativeExtent.spatialReference=t.storageInfo.origin.spatialReference=t.spatialReference)}(0,n.bt)([(0,n.bu)()],ae.prototype,"_files",void 0),(0,n.bt)([(0,n.bu)()],ae.prototype,"_headerInfo",void 0),(0,n.bt)([(0,n.bu)()],ae.prototype,"_bufferSize",void 0),(0,n.bt)([(0,n.bu)({type:String,json:{write:!0}})],ae.prototype,"datasetFormat",void 0),ae=(0,n.bt)([(0,n.bv)("esri.layers.support.rasterDatasets.TIFFRaster")],ae);const ce=ae,ue=new Map;ue.set("MRF",{desc:"Meta Raster Format",constructor:te}),ue.set("TIFF",{desc:"GeoTIFF",constructor:ce}),ue.set("RasterTileServer",{desc:"Raster Tile Server",constructor:X}),ue.set("JPG",{desc:"JPG Raster Format",constructor:V}),ue.set("PNG",{desc:"PNG Raster Format",constructor:V}),ue.set("GIF",{desc:"GIF Raster Format",constructor:V}),ue.set("BMP",{desc:"BMP Raster Format",constructor:V}),ue.set("CovJSON",{desc:"COVJSON Raster Format",constructor:O}),ue.set("MEMORY",{desc:"In Memory Raster Format",constructor:C});class he{static get supportedFormats(){const e=new Set;return ue.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,source:s,sourceJSON:r}=e;let a=e.datasetFormat??i?.datasetFormat;null==a&&(t.includes(".")?a=t.slice(t.lastIndexOf(".")+1).toUpperCase():"coverage"===s?.type?.toLowerCase()?a="CovJSON":s?.extent&&s.pixelblocks&&(a="MEMORY")),"OVR"===a||"TIF"===a?a="TIFF":"JPG"===a||"JPEG"===a||"JFIF"===a?a="JPG":"COVJSON"===a&&(a="CovJSON"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(a="RasterTileServer");const o={url:t,source:s,sourceJSON:r,datasetFormat:a,ioConfig:i??{bandIds:null,sampling:null}};if(Object.keys(o).forEach((e=>{null==o[e]&&delete o[e]})),a){if(!this.supportedFormats.has(a))throw new n.s("rasterfactory:open","not a supported format "+a);if("CRF"===a)throw new n.s("rasterfactory:open",`cannot open raster: ${t}`);const i=new(ue.get(a).constructor)(o);return await i.open({signal:e.signal}),i}const l=Array.from(ue.keys()).filter((e=>"CovJSON"!==e&&"Memory"!==e));let c=0;const u=()=>{if(a=l[c++],!a||"CRF"===a)return null;const t=new(ue.get(a).constructor)(o);return t.open({signal:e.signal}).then((()=>t)).catch((()=>u()))};return u()}static register(e,t,i){ue.has(e.toUpperCase())||ue.set(e.toUpperCase(),{desc:t,constructor:i})}}let fe=class extends((0,n.ea)((0,n.ee)((0,n.ec)((0,n.ed)((0,n.pA)((0,n.er)(x((0,n.hj)((0,n.eq)((0,n.eb)((0,n.ef)((0,n.cQ)(n.ep))))))))))))){constructor(...e){super(...e),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=(0,n.f8)((async(e,t,s)=>{const{save:r,saveAs:a}=await i.e(6154).then(i.bind(i,36154));switch(e){case n.hE.SAVE:return r(this,t);case n.hE.SAVE_AS:return a(this,s,t)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(n.B).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[new n.bl({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new n.bl({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],t=this.raster?.rasterInfo??this.serviceRasterInfo,i=t?.attributeTable,s=null!=i?i.fields:null,r="Raster.";if(s){const t=s.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name=r+e.name,t}));e.push(...t)}const a=t?.dataType,o=t?.multidimensionalInfo;if(("vector-magdir"===a||"vector-uv"===a)&&null!=o){const t=o.variables[0].unit?.trim(),i="Magnitude"+(t?` (${t})`:"");e.push(new n.bl({name:"Raster.Magnitude",alias:i,domain:null,editable:!1,type:"double"})),e.push(new n.bl({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return e}createPopupTemplate(e){const{rasterFields:t}=this,i=e?.visibleFieldNames??new Set(t.map((({name:e})=>e)).filter((e=>"raster.servicepixelvalue.raw"!==e.toLowerCase()))),s=(0,n.hm)({fields:t,title:this.title},{...e,visibleFieldNames:i}),{rasterInfo:r}=this.raster;return s?.fieldInfos&&r?.pixelType.startsWith("f")&&s.fieldInfos.forEach((({format:e,fieldName:t})=>{e&&t&&/^raster\.(item|service)pixelvalue/i.test(t)&&(e.places=2)})),s}async generateRasterInfo(e,t){if(e=(0,n.aZ)(n.o_,e),await this.load(),!e||"none"===e.functionName?.toLowerCase())return this.serviceRasterInfo;try{const{rasterInfo:i}=await this._openFunctionRaster(e,t);return i}catch(i){throw i instanceof n.s?i:new n.s("imagery-tile-layer","the given raster function is not supported")}}async save(e){return this._debouncedSaveOperations(n.hE.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(n.hE.SAVE_AS,t,e)}write(e,t){const i=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t?.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new n.s("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){let t=!1;if(this.raster)await this._openFromRaster(this.raster,e),t="Function"===this.raster.datasetFormat,!t&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:t,rasterFunction:i,source:s}=this;if(!t&&!s)throw new n.s("imagery-tile-layer:open","missing url or source parameter");s?await this._openFromSource(s,e):i?await this._openFromUrlWithRasterFunction(t,i,e):await this._openFromUrl(t,e)}const i=this.raster.rasterInfo;if(!i)throw new n.s("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",t?i:this._primaryRasters[0].rasterInfo),this._set("spatialReference",i.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles((0,n.cc)((()=>this.customParameters),(e=>{this.raster&&(this.raster.ioConfig.customFetchParameters=e)})))}async _openFromRaster(e,t){e.rasterInfo||await e.open({signal:t}),this._primaryRasters="Function"===e.datasetFormat?e.primaryRasters.rasters:[e],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(e,t,i){const s=[e];t&&(0,a.w)(t.toJSON(),s);const r=await Promise.all(s.map((e=>he.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:i})))),o=r.findIndex((e=>null==e));if(o>-1)throw new n.s("imagery-tile-layer:open",`cannot open raster: ${s[o]}`);return this._primaryRasters=r,this._initializeWithFunctionRaster(t)}async _openFromUrl(e,t){const i=await he.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==i)throw new n.s("imagery-tile-layer:open",`cannot open raster: ${e}`);this._primaryRasters=[i],this.raster=i}async _openFromSource(e,t){const i="the tiled imagery data source is not supported",s="coverage"===e.type?.toLowerCase()?"CovJSON":e.extent&&e.pixelBlock?"MEMORY":null;if(!s)throw new n.s("imagery-tile-layer:open",i);"MEMORY"===s&&(e={...e,pixelBlock:void 0,pixelBlocks:[e.pixelBlock]});const r=await he.open({url:"",source:e,datasetFormat:s,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==r)throw new n.s("imagery-tile-layer:open",i);this._primaryRasters=[r],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=r}async _openFunctionRaster(e,t){const i={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>i[e.url]=e));const n=(0,a.T)(e.functionDefinition?.toJSON()??e.toJSON(),i),s=new m({rasterFunction:n});return await s.open(t),s}async _initializeWithFunctionRaster(e,t){try{this.raster=await this._openFunctionRaster(e,t)}catch(i){i instanceof n.s&&n.G.getLogger(this).error("imagery-tile-layer:open",i.message),n.G.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};(0,n.bt)([(0,n.bu)({clonable:!1})],fe.prototype,"_primaryRasters",void 0),(0,n.bt)([(0,n.bu)(n.ei)],fe.prototype,"legendEnabled",void 0),(0,n.bt)([(0,n.bu)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],fe.prototype,"isReference",void 0),(0,n.bt)([(0,n.bu)({type:["show","hide"]})],fe.prototype,"listMode",void 0),(0,n.bt)([(0,n.bu)({json:{read:!0,write:!0}})],fe.prototype,"blendMode",void 0),(0,n.bt)([(0,n.bu)()],fe.prototype,"sourceJSON",void 0),(0,n.bt)([(0,n.bu)({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],fe.prototype,"version",void 0),(0,n.bt)([(0,n.bu)({readOnly:!0,json:{read:!1}})],fe.prototype,"type",void 0),(0,n.bt)([(0,n.bu)({type:["ArcGISTiledImageServiceLayer"]})],fe.prototype,"operationalLayerType",void 0),(0,n.bt)([(0,n.bu)({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,i){t[i]=!e}}}})],fe.prototype,"popupEnabled",void 0),(0,n.bt)([(0,n.bu)({type:n.ce,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],fe.prototype,"popupTemplate",void 0),(0,n.bt)([(0,n.bu)({readOnly:!0})],fe.prototype,"defaultPopupTemplate",null),(0,n.bt)([(0,n.bu)({readOnly:!0,type:[n.bl]})],fe.prototype,"fields",void 0),(0,n.bt)([(0,n.bu)({readOnly:!0,type:[n.bl]})],fe.prototype,"rasterFields",null),(0,n.bt)([(0,n.bu)({constructOnly:!0})],fe.prototype,"source",void 0),fe=(0,n.bt)([(0,n.bv)("esri.layers.ImageryTileLayer")],fe);const de=fe},74506:function(e,t,i){i.d(t,{a:function(){return u},g:function(){return y},h:function(){return p},i:function(){return l},m:function(){return f},s:function(){return h},u:function(){return c},x:function(){return d}});var n=i(44444),s=i(6255);class r{constructor(e=15e3,t=5e3){this._timer=null,this._cachedBlocks=new Map,this._size=-1,this._duration=e,this._interval=Math.min(e,t)}decreaseRefCount(e,t){const i=e+"/"+t,n=this._cachedBlocks;if(n.has(i)){const e=n.get(i);return e.refCount--,e.refCount<=0&&(n.delete(i),e.controller&&e.controller.abort()),e.refCount}return 0}getBlock(e,t){const i=e+"/"+t,n=this._cachedBlocks;if(n.has(i)){const e=n.get(i);return e.ts=Date.now(),e.refCount++,n.delete(i),n.set(i,e),e.block}return null}putBlock(e,t,i,n){const s=this._cachedBlocks,r=e+"/"+t;if(s.has(r)){const e=s.get(r);e.ts=Date.now(),e.refCount++}else s.set(r,{block:i,ts:Date.now(),refCount:1,controller:n});this._trim(),this._updateTimer()}deleteBlock(e,t){const i=this._cachedBlocks,n=e+"/"+t;i.has(n)&&i.delete(n)}updateMaxSize(e){this._size=e,this._trim()}empty(){this._cachedBlocks.clear(),this._clearTimer()}getCurrentSize(){return this._cachedBlocks.size}_updateTimer(){if(null!=this._timer)return;const e=this._cachedBlocks;this._timer=setInterval((()=>{const t=Array.from(e),i=Date.now();for(let n=0;n<t.length&&t[n][1].ts<=i-this._duration;n++)e.delete(t[n][0]);0===e.size&&this._clearTimer()}),this._interval)}_trim(){const e=this._cachedBlocks;if(-1===this._size||this._size>=e.size)return;const t=Array.from(e);for(let i=0;i<t.length-this._size;i++)e.delete(t[i][0])}_clearTimer(){null!=this._timer&&(clearInterval(this._timer),this._timer=null)}}const a=new Map,o=new r;function l(e,t){return null==t?e:`${e}?sliceId=${t}`}function c(e,t){const i={extent:null,rasterInfo:t,cache:new Map},n=a.get(e);return n?(n.push(i),n.length-1):(a.set(e,[i]),0)}function u(e,t){const i=a.get(e);i&&(i[t]=null,i.some((e=>null!=e))||a.delete(e))}function h(e,t,i){const n=a.get(e);if(!n)return null==t?o.decreaseRefCount(e,i):0;if(null==t||null==n[t])return o.decreaseRefCount(e,i);const s=n[t]?.cache,r=s?.get(i);if(s&&r){if(r.refCount--,0===r.refCount){s.delete(i);for(let e=0;e<n.length;e++)n[e]?.cache.delete(i);r.controller&&r.controller.abort()}return r.refCount}return 0}function f(e,t,i){const n=a.get(e);if(!n)return null==t?o.getBlock(e,i):null;if(null==t||null==n[t]){for(let e=0;e<n.length;e++){const t=n[e]?.cache.get(i);if(t)return t.refCount++,t.block}return o.getBlock(e,i)}const s=n[t]?.cache.get(i);if(s)return s.refCount++,s.block;for(let r=0;r<n.length;r++){if(r===t||!n[r])continue;const e=n[r]?.cache,s=e?.get(i);if(e&&s)return s.refCount++,e.set(i,s),s.block}return null}function d(e,t,i,n,s=null){const r=a.get(e);if(!r)return void(null==t&&o.putBlock(e,i,n,s));if(null==t||null==r[t])return void o.putBlock(e,i,n,s);const l={refCount:1,block:n,isResolved:!1,isRejected:!1,controller:s};n.then((()=>l.isResolved=!0)).catch((()=>l.isRejected=!0)),r[t]?.cache.set(i,l)}function p(e,t,i){const n=a.get(e);n?null!=t&&null!=n[t]?n[t]?.cache.delete(i):o.deleteBlock(e,i):null==t&&o.deleteBlock(e,i)}function m(e,t){const i=a.get(e);return i?i[t]??null:null}function y(e,t,i,r,a,o,l=null){const c=m(e,t);if(!c)return;const u=c.extent,{cache:h,rasterInfo:f}=c;if(u&&u.xmin===i.xmin&&u.xmax===i.xmax&&u.ymin===i.ymin&&u.ymax===i.ymax)return;r=r??0;const d=i.clone().normalize(),{spatialReference:p,transform:y}=f,g=new Set;for(let m=0;m<d.length;m++){const e=d[m];if(e.xmax-e.xmin<=r||e.ymax-e.ymin<=r)continue;let t=(0,s.K)(e,p,l);null!=y&&(t=y.inverseTransform(t));const i=new n.D({x:r,y:r,spatialReference:e.spatialReference});if(null==a&&!(a=(0,s.C)(i,p,e,l)))return;const{pyramidLevel:c,pyramidResolution:u,excessiveReading:h}=(0,s.l)(a,f,o||"closest");if(h)return;const{storageInfo:x}=f,{origin:b}=x,w={x:Math.max(0,Math.floor((t.xmin-b.x)/u.x)),y:Math.max(0,Math.floor((b.y-t.ymax)/u.y))},I=Math.ceil((t.xmax-t.xmin)/u.x-.1),R=Math.ceil((t.ymax-t.ymin)/u.y-.1),v=c>0?x.pyramidBlockWidth:x.blockWidth,S=c>0?x.pyramidBlockHeight:x.blockHeight,T=1,_=Math.max(0,Math.floor(w.x/v)-T),k=Math.max(0,Math.floor(w.y/S)-T),F=Math.floor((w.x+I-1)/v)+T,C=Math.floor((w.y+R-1)/S)+T;for(let n=k;n<=C;n++)for(let e=_;e<=F;e++)g.add(`${c}/${n}/${e}`)}h.forEach(((e,t)=>{if(!g.has(t)){const e=h.get(t);(null==e||e.isResolved||e.isRejected)&&h.delete(t)}})),c.extent={xmin:i.xmin,ymin:i.ymin,xmax:i.xmax,ymax:i.ymax}}}}]);
//# sourceMappingURL=2790.50f14395.js.map