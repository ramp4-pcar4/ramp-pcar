"use strict";(self["webpackChunkramp_website"]=self["webpackChunkramp_website"]||[]).push([[6470],{57452:function(e,s,t){t.d(s,{i:function(){return a},n:function(){return r}});var n=t(44444),o=t(72329);function r(e,s,t=i){return new n.D({x:e[t.originX],y:e[t.originY],z:e[t.originZ],spatialReference:s})}function a(e,s=i){return new o.N({translation:[e[s.translationX],-e[s.translationZ],e[s.translationY]],rotationAxis:[e[s.rotationX],-e[s.rotationZ],e[s.rotationY]],rotationAngle:e[s.rotationDeg],scale:[e[s.scaleX],e[s.scaleZ],e[s.scaleY]]})}const i={originX:"originX",originY:"originY",originZ:"originZ",translationX:"translationX",translationY:"translationY",translationZ:"translationZ",scaleX:"scaleX",scaleY:"scaleY",scaleZ:"scaleZ",rotationX:"rotationX",rotationY:"rotationY",rotationZ:"rotationZ",rotationDeg:"rotationDeg"}},53674:function(e,s,t){t.d(s,{a:function(){return d},b:function(){return c},c:function(){return m},d:function(){return f},i:function(){return h},l:function(){return g},m:function(){return w},n:function(){return u},p:function(){return p},r:function(){return i},t:function(){return y},u:function(){return l}});var n=t(44444),o=t(72329);const r="upload-assets",a=()=>new Error;class i extends n.s{constructor(){super(`${r}:unsupported`,"Layer does not support asset uploads.",a())}}let c=class extends n.s{constructor(){super(`${r}:no-glb-support`,"Layer does not support glb.",a())}};class u extends n.s{constructor(){super(`${r}:no-supported-source`,"No supported external source found",a())}}class l extends n.s{constructor(){super(`${r}:not-base-64`,"Expected gltf data in base64 format after conversion.",a())}}class p extends n.s{constructor(){super(`${r}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",a())}}class d extends n.s{constructor(e,s){super(`${r}:bad-response`,`Bad response. Uploaded ${e} items and received ${s} results.`,a())}}class f extends n.s{constructor(e,s){super(`${r}-layer:upload-failed`,`Failed to upload mesh file ${e}. Error code: ${s?.code??"-1"}. Error message: ${s?.messages??"unknown"}`,a())}}class m extends n.s{constructor(e){super(`${r}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${e}, but it does not list it in its supported formats.`,a())}}class g extends n.s{constructor(){super(`${r}:convert3D-failed`,"convert3D failed.")}}class h extends n.s{constructor(){super("invalid-input:no-model","No supported model found")}}class w extends n.s{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}}function y(e){const s=1/(0,n.cm)(e,1);return 1!==s?new o.N({scale:[s,s,s]}):void 0}},16470:function(e,s,t){t.d(s,{uploadAssets:function(){return x}});var n=t(44444),o=t(84247),r=t(53674),a=t(57452);const i={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function c(e,s=e=>{},t){return new u(e,s,t)}let u=class{constructor(e,s=e=>{},t){if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof e){this._weights={};for(let s=0;s<e;s++){const t=s,n=1/e;this._weights[t]=n,this._progressMap.set(t,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(1===e&&(0,n.Q)("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[s,t]of this._timingsMap){const n=Math.round(t.end-t.start)/1e3,o=Math.round(n/e*100);console.log(this.taskName??"Task",{stepKey:s,stepTime:n,relativeTime:o})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),(0,n.Q)("enable-feature:esri-3dofl-upload-timings")){const t=performance.now();this._startTime??=t;const o=(0,n.bz)(this._timingsMap,e,(()=>({start:t,end:0})));1===s&&(o.end=t)}this.emitProgress()}simulate(e,s){return l((s=>this.setProgress(e,s)),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function l(e=e=>{},s=w){const t=performance.now();e(0);const o=setInterval((()=>{const n=performance.now()-t,o=1-Math.exp(-n/s);e(o)}),h);return(0,n.bh)((()=>{clearInterval(o),e(1)}))}function p(e,s=f){return(0,n.kG)((0,n.kH)(e*g/s))}function d(e,s=m){return(0,n.kG)((0,n.kH)(e*g/s))}const f=10,m=10,g=8e-6,h=(0,n.bj)(50),w=(0,n.bj)(1e3),y=1e6,b=20*y,P=2e9,T=3;async function v({data:e,name:s,description:t},o,r){let a=null;try{const i=(0,n.aw)(o,"uploads"),u=(0,n.aw)(i,"info"),{data:l}=await(0,n.U)(u,{query:{f:"json"},responseType:"json"});(0,n.J)(r);const d=(0,n.fr)(o),f=l.maxUploadFileSize*y,m=d?P:f,g=d?Math.min(b,f):b;if(e.size>m)throw new Error("Data too large");const h=(0,n.aw)(i,"register"),{data:w}=await(0,n.U)(h,{query:{f:"json",itemName:A(s),description:t},responseType:"json",method:"post"});if((0,n.J)(r),!w.success)throw new Error("Registration failed");const{itemID:v}=w.item;a=(0,n.aw)(i,v);const x=(0,n.aw)(a,"uploadPart"),k=Math.ceil(e.size/g),U=new Array;for(let s=0;s<k;++s)U.push(e.slice(s*g,Math.min((s+1)*g,e.size)));const D=U.slice().reverse(),N=new Array,$=c(k,r?.onProgress,"uploadItem"),j=async()=>{for(;0!==D.length;){const e=U.length-D.length,s=D.pop(),t=new FormData,o=$.simulate(e,p(s.size));try{t.append("f","json"),t.append("file",s),t.append("partId",`${e}`);const{data:o}=await(0,n.U)(x,{timeout:0,body:t,responseType:"json",method:"post"});if((0,n.J)(r),!o.success)throw new Error("Part upload failed")}finally{o.remove()}}};for(let e=0;e<T&&0!==D.length;++e)N.push(j());await Promise.all(N);const F=(0,n.aw)(a,"commit"),{data:M}=await(0,n.U)(F,{query:{f:"json",parts:U.map(((e,s)=>s)).join(",")},responseType:"json",method:"post"});if((0,n.J)(r),!M.success)throw new Error("Commit failed");return M.item}catch(i){if(null!=a){const e=(0,n.aw)(a,"delete");await(0,n.U)(e,{query:{f:"json"},responseType:"json",method:"post"})}throw i}}function A(e){return e.replaceAll("/","_").replaceAll("\\","_")}async function x(e,s,t){const n=e.length;if(!n)return t?.onProgress?.(1),[];const o=c(n,t?.onProgress,"uploadAssets");return Promise.all(e.map(((e,n)=>k(e,s,{...t,onProgress:o.makeOnProgress(n)}))))}async function k(e,{layer:s,ongoingUploads:t},n){const o=t.get(e);if(o)return o;if(!L(s))throw new r.r;if(U(e,s))return n?.onProgress?.(1),e;const a=D(e,s,n);t.set(e,a);try{await a}finally{t.delete(e)}return e}function U(e,s){const{parsedUrl:t}=s;return null!=t&&e.metadata.externalSources.some((e=>(0,o.m)(e,t)))}async function D(e,s,t){const{metadata:o}=e,{displaySource:r}=o,a=E(r?.source,s,{checkForConversionRequired:(0,n.Q)("enable-feature:georeferenced-uploads")}),i=null!=a?N(a,s,t):o.externalSources.length>0?$(e,s,t):j(e,s,t),c=await i;return(0,n.J)(t),e.addExternalSources([c]),e}async function N(e,s,t){return{source:await I(e,s,t),original:!0,unitConversionDisabled:!0}}async function $(e,s,t){const n=z(s),{externalSources:o}=e.metadata,a=M(o,s);if(!a)throw new r.n;const u=c(i.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),l=await I(a,s,{onProgress:u.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:l,original:!0}]);const p=a.reduce(((e,{asset:s})=>s instanceof File?e+s.size:e),0),f=u.simulate("serviceAssetsToGlb",d(p));try{const{source:o,transform:r,origin:a}=await Y(l,s,n);return e.transform=r,a&&(e.metadata.georeferenced=!0,t?.useAssetOrigin&&(e.vertexSpace.origin=[a.x,a.y,a.z??0],e.spatialReference=a.spatialReference)),{source:o,unitConversionDisabled:!0}}finally{f.remove()}}async function j(e,s,t){const n=c(i.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),o=F(e,s,{...t,onProgress:n.makeOnProgress("meshToAssetBlob")});return{source:await _([o],s,{...t,onProgress:n.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function F(e,s,t){const o=z(s),r=await e.load(t),a=await r.toBinaryGLTF({origin:r.origin,signal:t?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return(0,n.J)(t),{blob:new Blob([a],{type:"model/gltf-binary"}),assetName:`${(0,n.$)()}.glb`,assetType:o}}function M(e,s){for(const t of e){const e=E(t.source,s);if(e)return e}return null}function E(e,{infoFor3D:s},t={}){if(!e)return null;const{supportedFormats:r,editFormats:a}=s,i=(0,o.N)(e),c=new Array,u=(0,n.kI)(s),l=(0,n.kJ)(s);let p=!1;for(const n of i){const e=S(n,r);if(!e)return null;const{assetType:s}=e;if(t.checkForConversionRequired&&(s===u||s===l))return null;a.includes(s)&&(p=!0),c.push(e)}return p?c:null}function S(e,s){const t=(0,o.b)(e,s);return t?{asset:e,assetType:t}:null}async function I(e,s,t){return _(e.map((e=>J(e,t))),s,t)}async function _(e,s,t){const o=c(i.uploadAssetBlobs,t?.onProgress,"uploadAssetBlobs"),r=await C(e,s,{...t,onProgress:o.makeOnProgress("prepareAssetItems")});(0,n.J)(t);const a=r.map((({item:e})=>e)),{uploadResults:u}=await B(a,s,{...t,onProgress:o.makeOnProgress("uploadAssetItems")});return(0,n.J)(t),e.map(((e,t)=>O(r[t],u[t],s)))}async function J(e,s){const{asset:t,assetType:o}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:o};const r=await t.toBlob(s);return(0,n.J)(s),{blob:r,assetName:t.assetName,assetType:o}}async function R(e,s,t){const{blob:o,assetType:a,assetName:i}=e;let c=null;try{const e=await v({data:o,name:i},s.url,t);(0,n.J)(t),c={assetType:a,assetUploadId:e.itemID}}catch(u){(0,n.B)(u),G().warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!c){const e=await(0,n.fg)(o);if((0,n.J)(t),!e.isBase64)throw new r.u;c={assetType:a,assetData:e.data}}if(!c)throw new r.p;return{item:c,assetName:i}}function C(e,s,t){const o=c(e.length,t?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,r)=>{const a=R(await e,s,{...t,onProgress:o.makeOnProgress(r)});return(0,n.J)(t),a})))}async function B(e,s,t){const o=l(t?.onProgress);try{const o=await(0,n.U)((0,n.aw)(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if((0,n.J)(t),o.data.uploadResults.length!==e.length)throw new r.a(e.length,o.data.uploadResults.length);return o.data}finally{o.remove()}}function O(e,s,t){const{success:a}=s;if(!a){const{error:t}=s;throw new r.d(e.assetName,t)}const{assetHash:i}=s,{assetName:c,item:{assetType:u}}=e,{infoFor3D:{supportedFormats:l}}=t,p=(0,n.by)(u,l);if(!p)throw new r.c(u);return new o.a(c,p,[new o.i(`${t.parsedUrl.path}/assets/${i}`,i)])}async function Y(e,s,t){const o=e.map((({assetName:e,parts:s})=>({assetName:e,assetHash:s[0].partHash})));let a;try{const e=(0,n.aw)(s.parsedUrl.path,"convert3D"),r=s.capabilities?.operations.supportsAsyncConvert3D;a=(await(r?q:Z)(e,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:t,async:r},responseType:"json",timeout:0})).data}catch{throw new r.l}return X(s,a)}function X(e,s){const t={source:s.assets.map((s=>{const t=(0,n.kK)(s.contentType,e.infoFor3D.supportedFormats);if(!t)throw new r.c(t);return new o.a(s.assetName,s.contentType,[new o.i(s.assetURL,s.assetHash)])})),origin:void 0,transform:void 0};if((0,n.Q)("enable-feature:georeferenced-uploads")&&s.transform){if(t.transform=(0,a.i)(s.transform),s.spatialReference){const e=n.aY.fromJSON(s.spatialReference);t.origin=(0,a.n)(s.transform,e)}}else t.transform=(0,r.t)(e.spatialReference);return t}function Z(e,s){return(0,n.U)(e,s)}async function q(e,s){const t=(await(0,n.U)(e,s)).data.statusUrl;for(;;){const e=(await(0,n.U)(t,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return(0,n.U)(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,n.ft)(H)}}function L(e){return!!e.infoFor3D&&!!e.url}function z({infoFor3D:e}){const s=(0,n.kL)(e);if(!s)throw new r.b;return s}function G(){return n.G.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const H=(0,n.bj)(1e3)}}]);
//# sourceMappingURL=6470.d78114d5.js.map